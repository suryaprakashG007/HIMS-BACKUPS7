import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";

/**
 * Copyright IBM Corp. 2025
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { useState } from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import NumberInputV2 from './NumberInputV2';

function translateWithId(id) {
  if (id === 'increment.number') {
    return 'increment';
  }

  if (id === 'decrement.number') {
    return 'decrement';
  }

  throw new Error("Unknown message id: ".concat(id));
}

describe('with type="text"', function () {
  it('should render an <input> with type="text"', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test"
    })); // Note: an input with type="text" is considered a `textbox`

    expect(screen.getByRole('textbox')).toBeInTheDocument();
  });
  it('should place className on the outermost element', function () {
    var _render = render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      className: "custom-class",
      label: "test-label",
      id: "test"
    })),
        container = _render.container;

    expect(container.firstChild).toHaveClass('custom-class');
  });
  it('should set `min` on the underlying <input>', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test",
      min: 0
    }));
    expect(screen.getByLabelText('test-label')).toHaveAttribute('min', '0');
  });
  it('should set `max` on the underlying <input>', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test",
      max: 10
    }));
    expect(screen.getByLabelText('test-label')).toHaveAttribute('max', '10');
  });
  it('should set `step` on the underlying <input>', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test",
      step: 5
    }));
    expect(screen.getByLabelText('test-label')).toHaveAttribute('step', '5');
  });
  it('should set `disabled` on the underlying <input>', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test",
      disabled: true
    }));
    expect(screen.getByLabelText('test-label')).toBeDisabled();
  });
  it('should set the defaultValue of the <input> with `defaultValue`', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test",
      defaultValue: 5
    }));
    expect(screen.getByLabelText('test-label')).toHaveValue('5');
  });
  it('should set the given `value` on <input> when value > min', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test",
      min: 0,
      value: 5
    }));
    expect(screen.getByLabelText('test-label')).toHaveValue('5');
  });
  it('should allow an empty string as input to the underlying <input>', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test",
      value: "",
      invalidText: "test-invalid-text"
    }));
    expect(screen.getByLabelText('test-label')).toHaveValue('');
  });
  it('should set the input as invalid when value < min', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test",
      value: 5,
      min: 10,
      invalidText: "test-invalid-text"
    }));
    expect(screen.getByLabelText('test-label')).toHaveValue('5');
    expect(screen.getByText('test-invalid-text')).toBeInTheDocument();
    expect(screen.getByRole('textbox')).toHaveAttribute('data-invalid');
  });
  it('should not render invalidText when value is empty string', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test",
      value: "",
      invalidText: "test-invalid-text"
    }));
    expect(screen.getByLabelText('test-label')).toHaveValue('');
    expect(screen.queryByText('test-invalid-text')).not.toBeInTheDocument();
  });
  it('should describe the <input> through `helperText`', function () {
    render( /*#__PURE__*/React.createElement(NumberInputV2, {
      type: "text",
      label: "test-label",
      id: "test",
      helperText: "test-helper-text"
    })); // Note: is aria-describedby correctly set up here?

    expect(screen.getByText('test-helper-text')).toBeInTheDocument();
  });
  it('should call `onClick` when the `<input>` is clicked', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var onClick;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onClick = jest.fn();
            render( /*#__PURE__*/React.createElement(NumberInputV2, {
              type: "text",
              label: "test-label",
              id: "test",
              onClick: onClick,
              min: 0,
              value: 10,
              max: 100
            }));
            _context.next = 4;
            return userEvent.click(screen.getByLabelText('test-label'));

          case 4:
            expect(onClick).toHaveBeenCalled();

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should not call `onClick` when the `<input>` is clicked but disabled', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var onClick;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onClick = jest.fn();
            render( /*#__PURE__*/React.createElement(NumberInputV2, {
              type: "text",
              disabled: true,
              label: "test-label",
              id: "test",
              onClick: onClick,
              min: 0,
              value: 10,
              max: 100
            }));
            _context2.next = 4;
            return userEvent.click(screen.getByLabelText('test-label'));

          case 4:
            expect(onClick).not.toHaveBeenCalled();

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('should call `onChange` when the value changes', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var onChange;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            onChange = jest.fn();
            render( /*#__PURE__*/React.createElement(NumberInputV2, {
              type: "text",
              label: "test-label",
              id: "test",
              onChange: onChange,
              min: 0,
              value: 10,
              max: 100,
              translateWithId: translateWithId
            }));
            _context3.next = 4;
            return userEvent.click(screen.getByLabelText('increment'));

          case 4:
            expect(onChange).toHaveBeenCalledTimes(1);
            expect(onChange).toHaveBeenCalledWith(expect.objectContaining({
              target: expect.any(Object)
            }), expect.objectContaining({
              value: 11,
              direction: 'up'
            }));
            _context3.next = 8;
            return userEvent.click(screen.getByLabelText('decrement'));

          case 8:
            expect(onChange).toHaveBeenCalledTimes(2);

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('should call `onBlur` when the input is blurred', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var onBlur;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            onBlur = jest.fn();
            render( /*#__PURE__*/React.createElement(NumberInputV2, {
              type: "text",
              label: "test-label",
              id: "test",
              onBlur: onBlur,
              min: 0,
              defaultValue: 10,
              max: 100,
              translateWithId: translateWithId
            }));
            _context4.next = 4;
            return userEvent.click(screen.getByLabelText('test-label'));

          case 4:
            _context4.next = 6;
            return userEvent.tab();

          case 6:
            expect(onBlur).toHaveBeenCalledTimes(1);
            expect(onBlur).toHaveBeenCalledWith(expect.objectContaining({
              target: expect.any(Object)
            }));

          case 8:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  describe('steppers', function () {
    it('should call `onClick` when up or down arrows are clicked', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      var onClick;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              onClick = jest.fn();
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                onClick: onClick,
                min: 0,
                defaultValue: 10,
                max: 100,
                translateWithId: translateWithId
              }));
              _context5.next = 4;
              return userEvent.click(screen.getByLabelText('increment'));

            case 4:
              expect(onClick).toHaveBeenCalledTimes(1);
              expect(screen.getByLabelText('test-label')).toHaveValue('11');
              _context5.next = 8;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 8:
              expect(onClick).toHaveBeenCalledTimes(2);
              expect(screen.getByLabelText('test-label')).toHaveValue('10');

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
    it('should call `onBlur` when focus leaves the input, decrement button, or increment button', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
      var onBlur;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              onBlur = jest.fn();
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                onBlur: onBlur,
                min: 0,
                defaultValue: 10,
                max: 100,
                translateWithId: translateWithId
              }));
              _context6.next = 4;
              return userEvent.click(screen.getByLabelText('test-label'));

            case 4:
              expect(screen.getByLabelText('test-label')).toHaveFocus();
              _context6.next = 7;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 7:
              expect(onBlur).toHaveBeenCalledTimes(1);
              expect(onBlur).toHaveBeenCalledWith(expect.objectContaining({
                target: expect.any(Object)
              }));
              expect(screen.getByLabelText('decrement')).toHaveFocus();
              _context6.next = 12;
              return userEvent.click(screen.getByLabelText('increment'));

            case 12:
              expect(onBlur).toHaveBeenCalledTimes(2);
              expect(onBlur).toHaveBeenCalledWith(expect.objectContaining({
                target: expect.any(Object)
              }));
              expect(screen.getByLabelText('increment')).toHaveFocus();
              _context6.next = 17;
              return userEvent.click(screen.getByLabelText('test-label'));

            case 17:
              expect(onBlur).toHaveBeenCalledTimes(3);
              expect(onBlur).toHaveBeenCalledWith(expect.objectContaining({
                target: expect.any(Object)
              }));
              expect(screen.getByLabelText('test-label')).toHaveFocus();

            case 20:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
    it('should set up and down arrows as disabled if `disabled` is true', function () {
      render( /*#__PURE__*/React.createElement(NumberInputV2, {
        type: "text",
        label: "test-label",
        id: "test",
        min: 0,
        defaultValue: 10,
        max: 100,
        disabled: true,
        translateWithId: translateWithId
      }));
      expect(screen.getByLabelText('increment')).toBeDisabled();
      expect(screen.getByLabelText('decrement')).toBeDisabled();
    });
    it('should not call `onClick` when up or down arrows are clicked but the <input> is disabled', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
      var onClick;
      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              onClick = jest.fn();
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                onClick: onClick,
                min: 0,
                defaultValue: 10,
                max: 100,
                disabled: true,
                translateWithId: translateWithId
              }));
              _context7.next = 4;
              return userEvent.click(screen.getByLabelText('increment'));

            case 4:
              expect(onClick).not.toHaveBeenCalled();
              expect(screen.getByLabelText('test-label')).toHaveValue('10');
              _context7.next = 8;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 8:
              expect(onClick).not.toHaveBeenCalled();
              expect(screen.getByLabelText('test-label')).toHaveValue('10');

            case 10:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    })));
    it('should only increase the value on up arrow click if value is less than max', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
      return _regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                min: 0,
                defaultValue: 5,
                max: 10,
                step: 5,
                translateWithId: translateWithId
              }));
              expect(screen.getByLabelText('test-label')).toHaveValue('5');
              _context8.next = 4;
              return userEvent.click(screen.getByLabelText('increment'));

            case 4:
              expect(screen.getByLabelText('test-label')).toHaveValue('10');
              _context8.next = 7;
              return userEvent.click(screen.getByLabelText('increment'));

            case 7:
              expect(screen.getByLabelText('test-label')).toHaveValue('10');

            case 8:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    })));
    it('should only decrease the value on down arrow click if value is greater than min', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
      return _regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                min: 0,
                defaultValue: 5,
                max: 10,
                step: 5,
                translateWithId: translateWithId
              }));
              expect(screen.getByLabelText('test-label')).toHaveValue('5');
              _context9.next = 4;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 4:
              expect(screen.getByLabelText('test-label')).toHaveValue('0');
              _context9.next = 7;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 7:
              expect(screen.getByLabelText('test-label')).toHaveValue('0');

            case 8:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    })));
    it('should increase by the value of step', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
      return _regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                min: 0,
                defaultValue: 5,
                max: 10,
                step: 5,
                translateWithId: translateWithId
              }));
              expect(screen.getByLabelText('test-label')).toHaveValue('5');
              _context10.next = 4;
              return userEvent.click(screen.getByLabelText('increment'));

            case 4:
              expect(screen.getByLabelText('test-label')).toHaveValue('10');

            case 5:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    })));
    it('should decrease by the value of step', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
      return _regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                min: 0,
                defaultValue: 5,
                max: 10,
                step: 5,
                translateWithId: translateWithId
              }));
              expect(screen.getByLabelText('test-label')).toHaveValue('5');
              _context11.next = 4;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 4:
              expect(screen.getByLabelText('test-label')).toHaveValue('0');

            case 5:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    })));
    it('should begin incrementing from min when input is empty', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
      return _regeneratorRuntime.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                allowEmpty: true,
                min: -100,
                max: 100,
                step: 2,
                translateWithId: translateWithId
              }));
              expect(screen.getByLabelText('test-label')).toHaveValue('');
              _context12.next = 4;
              return userEvent.click(screen.getByLabelText('increment'));

            case 4:
              expect(screen.getByLabelText('test-label')).toHaveValue('-100');

            case 5:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    })));
    it('should begin decrementing from max when input is empty', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
      return _regeneratorRuntime.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                min: -100,
                max: 100,
                step: 2,
                translateWithId: translateWithId
              }));
              expect(screen.getByLabelText('test-label')).toHaveValue('');
              _context13.next = 4;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 4:
              expect(screen.getByLabelText('test-label')).toHaveValue('100');

            case 5:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    })));
    it('should begin incrementing from 0 when no min is provided and input is empty', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
      return _regeneratorRuntime.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                step: 2,
                translateWithId: translateWithId
              }));
              expect(screen.getByLabelText('test-label')).toHaveValue('');
              _context14.next = 4;
              return userEvent.click(screen.getByLabelText('increment'));

            case 4:
              expect(screen.getByLabelText('test-label')).toHaveValue('0');

            case 5:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    })));
    it('should begin decrementing from 0 when no max is provided and input is empty', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
      return _regeneratorRuntime.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "test-label",
                id: "test",
                step: 2,
                translateWithId: translateWithId
              }));
              expect(screen.getByLabelText('test-label')).toHaveValue('');
              _context15.next = 4;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 4:
              expect(screen.getByLabelText('test-label')).toHaveValue('0');

            case 5:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    })));
  });
  it('should increase by the value of large step and format to the default locale', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
    return _regeneratorRuntime.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(NumberInputV2, {
              type: "text",
              label: "test-label",
              id: "test",
              min: -9999,
              defaultValue: 1000,
              max: 10000,
              step: 1000,
              translateWithId: translateWithId
            }));
            expect(screen.getByLabelText('test-label')).toHaveValue('1,000');
            _context16.next = 4;
            return userEvent.click(screen.getByLabelText('increment'));

          case 4:
            expect(screen.getByLabelText('test-label')).toHaveValue('2,000');

          case 5:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  })));
  it('should decrease by the value of large step and format to the default locale', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {
    return _regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(NumberInputV2, {
              type: "text",
              label: "test-label",
              id: "test",
              min: -9999,
              defaultValue: 1000,
              max: 10000,
              step: 1000,
              translateWithId: translateWithId
            }));
            expect(screen.getByLabelText('test-label')).toHaveValue('1,000');
            _context17.next = 4;
            return userEvent.click(screen.getByLabelText('decrement'));

          case 4:
            expect(screen.getByLabelText('test-label')).toHaveValue('0');

          case 5:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  })));
  it('should respect readOnly prop', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
    var onChange, onClick, input;
    return _regeneratorRuntime.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            onChange = jest.fn();
            onClick = jest.fn();
            render( /*#__PURE__*/React.createElement(NumberInputV2, {
              type: "text",
              id: "input-1",
              label: "Number label",
              onClick: onClick,
              onChange: onChange,
              readOnly: true,
              translateWithId: translateWithId
            }));
            input = screen.getByRole('textbox'); // Click events should fire

            _context18.next = 6;
            return userEvent.click(input);

          case 6:
            expect(onClick).toHaveBeenCalledTimes(1); // Change events should *not* fire

            _context18.next = 9;
            return userEvent.type(input, '3');

          case 9:
            expect(input).not.toHaveValue('3');
            expect(screen.getByLabelText('increment')).toBeDisabled();
            expect(screen.getByLabelText('decrement')).toBeDisabled();
            _context18.next = 14;
            return userEvent.click(screen.getByLabelText('increment'));

          case 14:
            _context18.next = 16;
            return userEvent.click(screen.getByLabelText('decrement'));

          case 16:
            expect(onChange).toHaveBeenCalledTimes(0); // due to onblur/locale formatting

          case 17:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  })));
  it('should update value to empty when allowEmpty is true & input value becomes empty', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {
    var onChange, input;
    return _regeneratorRuntime.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            onChange = jest.fn();
            render( /*#__PURE__*/React.createElement(NumberInputV2, {
              type: "text",
              id: "carbon-number",
              min: -100,
              max: 100,
              defaultValue: 50,
              label: "NumberInput label",
              helperText: "Optional helper text.",
              invalidText: "Number is not valid",
              allowEmpty: true,
              onChange: onChange
            }));
            input = screen.getByLabelText('NumberInput label');
            _context19.next = 5;
            return userEvent.clear(input);

          case 5:
            _context19.next = 7;
            return userEvent.type(input, '{backspace}');

          case 7:
            expect(input.value).toBe('');
            _context19.next = 10;
            return userEvent.tab();

          case 10:
            expect(onChange).toHaveBeenCalledWith(expect.objectContaining({
              target: expect.any(Object)
            }), expect.objectContaining({
              value: NaN
            }));

          case 11:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  })));
  it('should increment and decrement decimal numbers without floating-point precision errors', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {
    var input;
    return _regeneratorRuntime.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(NumberInputV2, {
              type: "text",
              label: "NumberInput label",
              id: "number-input",
              min: 0,
              defaultValue: 15.01,
              step: 1,
              max: 100,
              translateWithId: translateWithId
            }));
            input = screen.getByLabelText('NumberInput label');
            expect(input).toHaveValue('15.01');
            _context20.next = 5;
            return userEvent.click(screen.getByLabelText('increment'));

          case 5:
            expect(input).toHaveValue('16.01');
            _context20.next = 8;
            return userEvent.click(screen.getByLabelText('decrement'));

          case 8:
            expect(input).toHaveValue('15.01');

          case 9:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  })));
  it('should support fully controlled api via value prop', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {
    var ControlledNumberInput, input;
    return _regeneratorRuntime.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            ControlledNumberInput = function ControlledNumberInput() {
              var _useState = useState(NaN),
                  _useState2 = _slicedToArray(_useState, 2),
                  value = _useState2[0],
                  setValue = _useState2[1];

              return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "NumberInput label",
                id: "number-input",
                min: -100,
                max: 100,
                value: value,
                onChange: function onChange(event, state) {
                  setValue(state.value);
                },
                translateWithId: translateWithId
              }), /*#__PURE__*/React.createElement("button", {
                type: "button",
                onClick: function onClick() {
                  setValue(50);
                }
              }, "set to 50"));
            };

            render( /*#__PURE__*/React.createElement(ControlledNumberInput, null));
            input = screen.getByLabelText('NumberInput label');
            expect(input).toHaveValue('');
            _context21.next = 6;
            return userEvent.click(screen.getByLabelText('increment'));

          case 6:
            expect(input).toHaveValue('-100');
            _context21.next = 9;
            return userEvent.click(screen.getByLabelText('increment'));

          case 9:
            expect(input).toHaveValue('-99');
            _context21.next = 12;
            return userEvent.clear(input);

          case 12:
            expect(input).toHaveValue('');
            _context21.next = 15;
            return userEvent.click(screen.getByLabelText('decrement'));

          case 15:
            expect(input).toHaveValue('100');
            _context21.next = 18;
            return userEvent.click(screen.getByLabelText('decrement'));

          case 18:
            expect(input).toHaveValue('99');
            _context21.next = 21;
            return userEvent.click(screen.getByText('set to 50'));

          case 21:
            expect(input).toHaveValue('50');
            _context21.next = 24;
            return userEvent.clear(input);

          case 24:
            expect(input).toHaveValue('');
            _context21.next = 27;
            return userEvent.click(screen.getByText('set to 50'));

          case 27:
            expect(input).toHaveValue('50');

          case 28:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  })));
  describe('locale parsing and formatting', function () {
    it('should parse and format numbers based on the default locale', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {
      var input;
      return _regeneratorRuntime.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "NumberInput label",
                id: "number-input",
                min: 0,
                defaultValue: 15.01,
                step: 1,
                max: 100,
                translateWithId: translateWithId
              }));
              input = screen.getByLabelText('NumberInput label');
              expect(input).toHaveValue('15.01');
              _context22.next = 5;
              return userEvent.click(screen.getByLabelText('increment'));

            case 5:
              expect(input).toHaveValue('16.01');
              _context22.next = 8;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 8:
              expect(input).toHaveValue('15.01');
              _context22.next = 11;
              return userEvent.clear(input);

            case 11:
              _context22.next = 13;
              return userEvent.type(input, '3');

            case 13:
              expect(input).toHaveValue('3');
              _context22.next = 16;
              return userEvent.type(input, '4');

            case 16:
              expect(input).toHaveValue('34');
              _context22.next = 19;
              return userEvent.type(input, ',');

            case 19:
              expect(input).toHaveValue('34,');
              _context22.next = 22;
              return userEvent.type(input, '8');

            case 22:
              expect(input).toHaveValue('34,8');
              _context22.next = 25;
              return userEvent.type(input, '9');

            case 25:
              expect(input).toHaveValue('34,89');
              _context22.next = 28;
              return userEvent.tab();

            case 28:
              expect(input).toHaveValue('3,489');
              _context22.next = 31;
              return userEvent.clear(input);

            case 31:
              _context22.next = 33;
              return userEvent.type(input, '1234,567');

            case 33:
              _context22.next = 35;
              return userEvent.tab();

            case 35:
              expect(input).toHaveValue('1,234,567');
              _context22.next = 38;
              return userEvent.clear(input);

            case 38:
              _context22.next = 40;
              return userEvent.type(input, '34.56');

            case 40:
              _context22.next = 42;
              return userEvent.tab();

            case 42:
              expect(input).toHaveValue('34.56');
              _context22.next = 45;
              return userEvent.type(input, '99999');

            case 45:
              _context22.next = 47;
              return userEvent.tab();

            case 47:
              expect(input).toHaveValue('34.57');

            case 48:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22);
    })));
    it('should parse and format numbers based on the given locale', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {
      var input;
      return _regeneratorRuntime.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                locale: "DE",
                label: "NumberInput label",
                id: "number-input",
                min: 0,
                defaultValue: 15.01,
                step: 1,
                max: 100,
                translateWithId: translateWithId
              }));
              input = screen.getByLabelText('NumberInput label');
              expect(input).toHaveValue('15,01');
              _context23.next = 5;
              return userEvent.click(screen.getByLabelText('increment'));

            case 5:
              expect(input).toHaveValue('16,01');
              _context23.next = 8;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 8:
              expect(input).toHaveValue('15,01');
              _context23.next = 11;
              return userEvent.clear(input);

            case 11:
              _context23.next = 13;
              return userEvent.type(input, '3');

            case 13:
              expect(input).toHaveValue('3');
              _context23.next = 16;
              return userEvent.type(input, '4');

            case 16:
              expect(input).toHaveValue('34');
              _context23.next = 19;
              return userEvent.type(input, ',');

            case 19:
              expect(input).toHaveValue('34,');
              _context23.next = 22;
              return userEvent.type(input, '8');

            case 22:
              expect(input).toHaveValue('34,8');
              _context23.next = 25;
              return userEvent.type(input, '9');

            case 25:
              expect(input).toHaveValue('34,89');
              _context23.next = 28;
              return userEvent.tab();

            case 28:
              expect(input).toHaveValue('34,89');
              _context23.next = 31;
              return userEvent.clear(input);

            case 31:
              _context23.next = 33;
              return userEvent.type(input, '1234,567');

            case 33:
              _context23.next = 35;
              return userEvent.tab();

            case 35:
              expect(input).toHaveValue('1.234,567');
              _context23.next = 38;
              return userEvent.clear(input);

            case 38:
              _context23.next = 40;
              return userEvent.type(input, '34.56');

            case 40:
              _context23.next = 42;
              return userEvent.tab();

            case 42:
              expect(input).toHaveValue('3.456');

            case 43:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    })));
    it('should not call onChange until onBlur when input is parsed and formatted', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {
      var onChange, input;
      return _regeneratorRuntime.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              onChange = jest.fn();
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "NumberInput label",
                id: "number-input",
                min: 0,
                defaultValue: 15.01,
                step: 1,
                max: 100,
                onChange: onChange,
                translateWithId: translateWithId
              }));
              input = screen.getByLabelText('NumberInput label');
              expect(input).toHaveValue('15.01');
              _context24.next = 6;
              return userEvent.type(input, '9');

            case 6:
              expect(onChange).not.toHaveBeenCalled();
              _context24.next = 9;
              return userEvent.type(input, '9');

            case 9:
              expect(onChange).not.toHaveBeenCalled();
              _context24.next = 12;
              return userEvent.tab();

            case 12:
              expect(input).toHaveValue('15.02');
              expect(onChange).toHaveBeenCalledWith(expect.objectContaining({
                target: expect.any(Object)
              }), expect.objectContaining({
                value: 15.02,
                direction: 'up'
              }));
              expect(onChange).toHaveBeenCalledTimes(1);
              _context24.next = 17;
              return userEvent.click(screen.getByLabelText('increment'));

            case 17:
              expect(input).toHaveValue('16.02');
              expect(onChange).toHaveBeenCalledWith(expect.objectContaining({
                target: expect.any(Object)
              }), expect.objectContaining({
                value: 16.02,
                direction: 'up'
              }));
              expect(onChange).toHaveBeenCalledTimes(2);
              _context24.next = 22;
              return userEvent.click(screen.getByLabelText('decrement'));

            case 22:
              expect(onChange).toHaveBeenCalledWith(expect.objectContaining({
                target: expect.any(Object)
              }), expect.objectContaining({
                value: 15.02,
                direction: 'down'
              }));
              expect(input).toHaveValue('15.02');
              expect(onChange).toHaveBeenCalledTimes(3);

            case 25:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    })));
    it('supports formatOptions prop', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {
      var input;
      return _regeneratorRuntime.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(NumberInputV2, {
                type: "text",
                label: "NumberInput label",
                id: "number-input",
                min: 0,
                defaultValue: 0.15,
                step: 0.05,
                max: 100,
                formatOptions: {
                  style: 'percent'
                },
                translateWithId: translateWithId
              }));
              input = screen.getByLabelText('NumberInput label');
              expect(input).toHaveValue('15%');
              _context25.next = 5;
              return userEvent.click(screen.getByLabelText('increment'));

            case 5:
              expect(input).toHaveValue('20%');

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    })));
  });
});