import _defineProperty from "@babel/runtime/helpers/defineProperty";

/**
 * Copyright IBM Corp. 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { CheckmarkFilled16, ErrorFilled16 } from '@carbon/icons-react';
import { useId } from '../../internal/useId';
import { usePrefix } from '../../internal/usePrefix';

function ProgressBar(_ref) {
  var _classNames;

  var className = _ref.className,
      helperText = _ref.helperText,
      hideLabel = _ref.hideLabel,
      label = _ref.label,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 100 : _ref$max,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'big' : _ref$size,
      _ref$status = _ref.status,
      status = _ref$status === void 0 ? 'active' : _ref$status,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'default' : _ref$type,
      value = _ref.value;
  var labelId = useId('progress-bar');
  var helperId = useId('progress-bar-helper');
  var prefix = usePrefix();
  var isFinished = status === 'finished';
  var isError = status === 'error';
  var indeterminate = !isFinished && !isError && (value === null || value === undefined);
  var cappedValue = value;

  if (cappedValue > max) {
    cappedValue = max;
  }

  if (cappedValue < 0) {
    cappedValue = 0;
  }

  if (isError) {
    cappedValue = 0;
  } else if (isFinished) {
    cappedValue = max;
  }

  var percentage = cappedValue / max;
  var wrapperClasses = classNames("".concat(prefix, "--progress-bar"), "".concat(prefix, "--progress-bar--").concat(size), "".concat(prefix, "--progress-bar--").concat(type), (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "--progress-bar--indeterminate"), indeterminate), _defineProperty(_classNames, "".concat(prefix, "--progress-bar--finished"), isFinished), _defineProperty(_classNames, "".concat(prefix, "--progress-bar--error"), isError), _classNames), className);
  var labelClasses = classNames("".concat(prefix, "--progress-bar__label"), _defineProperty({}, "".concat(prefix, "--visually-hidden"), hideLabel));
  var StatusIcon = null;

  if (isError) {
    StatusIcon = ErrorFilled16;
  } else if (isFinished) {
    StatusIcon = CheckmarkFilled16;
  }

  return /*#__PURE__*/React.createElement("div", {
    className: wrapperClasses
  }, /*#__PURE__*/React.createElement("div", {
    className: labelClasses,
    id: labelId
  }, /*#__PURE__*/React.createElement("span", {
    className: "".concat(prefix, "--progress-bar__label-text")
  }, label), StatusIcon && /*#__PURE__*/React.createElement(StatusIcon, {
    className: "".concat(prefix, "--progress-bar__status-icon")
  })), /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefix, "--progress-bar__track"),
    role: "progressbar",
    "aria-invalid": isError,
    "aria-labelledby": labelId,
    "aria-describedby": helperText ? helperId : null,
    "aria-valuemin": !indeterminate ? 0 : null,
    "aria-valuemax": !indeterminate ? max : null,
    "aria-valuenow": !indeterminate ? cappedValue : null
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefix, "--progress-bar__bar"),
    style: !isFinished && !isError ? {
      transform: "scaleX(".concat(percentage, ")")
    } : null
  })), helperText && /*#__PURE__*/React.createElement("div", {
    id: helperId,
    className: "".concat(prefix, "--progress-bar__helper-text")
  }, helperText));
}

ProgressBar.propTypes = {
  /**
   * Additional CSS class names.
   */
  className: PropTypes.string,

  /**
   * The current progress as a textual representation.
   */
  helperText: PropTypes.string,

  /**
   * Whether the label should be visually hidden.
   */
  hideLabel: PropTypes.bool,

  /**
   * A label describing the progress bar.
   */
  label: PropTypes.string.isRequired,

  /**
   * The maximum value.
   */
  max: PropTypes.number,

  /**
   * Specify the size of the ProgressBar.
   */
  size: PropTypes.oneOf(['small', 'big']),

  /**
   * Specify the status.
   */
  status: PropTypes.oneOf(['active', 'finished', 'error']),

  /**
   * Defines the alignment variant of the progress bar.
   */
  type: PropTypes.oneOf(['default', 'inline', 'indented']),

  /**
   * The current value.
   */
  value: PropTypes.number
};
export default ProgressBar;