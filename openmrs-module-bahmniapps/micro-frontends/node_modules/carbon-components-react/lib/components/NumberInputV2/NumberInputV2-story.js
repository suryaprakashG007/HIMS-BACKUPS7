"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Playground = exports.Default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _addonActions = require("@storybook/addon-actions");

var _addonKnobs = require("@storybook/addon-knobs");

var _NumberInputV = _interopRequireDefault(require("./NumberInputV2"));

var _NumberInputV2 = _interopRequireDefault(require("./NumberInputV2.mdx"));

var _excluded = ["numberInputArrowTranslationIds"];
var sizes = {
  'Small  (sm)': 'sm',
  'Medium (md) - default': undefined,
  'Large  (lg)': 'lg'
};
var locales = {
  English: 'en-US',
  German: 'de-DE'
};
var reusableProps = {
  min: -100000000,
  max: 100000000
};

var props = function props() {
  return {
    className: 'some-class',
    id: 'tj-input',
    label: (0, _addonKnobs.text)('Label (label)', 'NumberInput label'),
    hideLabel: (0, _addonKnobs.boolean)('No label (hideLabel)', false),
    hideSteppers: (0, _addonKnobs.boolean)('No steppers (hideSteppers)', false),
    min: (0, _addonKnobs.number)('Minimum value (min)', reusableProps.min),
    max: (0, _addonKnobs.number)('Maximum value (max)', reusableProps.max),
    step: (0, _addonKnobs.number)('Step of up/down arrow (step)', 10),
    size: (0, _addonKnobs.select)('Field size (size)', sizes, undefined) || undefined,
    locale: (0, _addonKnobs.select)('Locale', locales, undefined) || undefined,
    type: 'text',
    disabled: (0, _addonKnobs.boolean)('Disabled (disabled)', false),
    readOnly: (0, _addonKnobs.boolean)('Read only (readOnly)', false),
    invalid: (0, _addonKnobs.boolean)('Show form validation UI (invalid)', false),
    invalidText: (0, _addonKnobs.text)('Form validation UI content (invalidText)', 'Number is not valid'),
    warn: (0, _addonKnobs.boolean)('Show warning state (warn)', false),
    warnText: (0, _addonKnobs.text)('Warning state text (warnText)', 'A high threshold may impact performance'),
    helperText: (0, _addonKnobs.text)('Helper text (helperText)', 'Optional helper text.'),
    light: (0, _addonKnobs.boolean)('Light variant (light)', false),
    onChange: (0, _addonActions.action)('onChange'),
    onClick: (0, _addonActions.action)('onClick'),
    numberInputArrowTranslationIds: (0, _addonKnobs.object)('Number input arrow icon translation IDs (for translateWithId callback)', {
      'increment.number': 'Increment number',
      'decrement.number': 'Decrement number'
    })
  };
};

var _default = {
  title: 'Components/NumberInputV2',
  component: _NumberInputV.default,
  decorators: [_addonKnobs.withKnobs],
  parameters: {
    docs: {
      page: _NumberInputV2.default
    }
  }
};
exports.default = _default;

var Default = function Default() {
  return /*#__PURE__*/_react.default.createElement(_NumberInputV.default, {
    id: "default-number-input",
    min: reusableProps.min,
    max: reusableProps.max,
    inputMode: "decimal",
    defaultValue: 50,
    label: "NumberInput label",
    invalidText: "Number is not valid. Must be between ".concat(reusableProps.min, " and ").concat(reusableProps.max),
    type: 'text',
    locale: 'en-US'
  });
};

exports.Default = Default;
Default.story = {
  name: 'Number Input Type Text'
};

var Playground = function Playground() {
  var _props = props(),
      numberInputArrowTranslationIds = _props.numberInputArrowTranslationIds,
      rest = (0, _objectWithoutProperties2.default)(_props, _excluded);

  return /*#__PURE__*/_react.default.createElement(_NumberInputV.default, (0, _extends2.default)({
    id: "playground-number-input",
    translateWithId: function translateWithId(id) {
      return numberInputArrowTranslationIds[id];
    },
    defaultValue: 50
  }, rest));
};

exports.Playground = Playground;