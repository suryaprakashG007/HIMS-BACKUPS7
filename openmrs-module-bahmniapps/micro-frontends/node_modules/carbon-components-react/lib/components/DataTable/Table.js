"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Table = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var FeatureFlags = _interopRequireWildcard(require("@carbon/feature-flags"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _deprecate = _interopRequireDefault(require("../../prop-types/deprecate.js"));

var _useEvent = require("../../internal/useEvent");

var _usePrefix = require("../../internal/usePrefix");

var _excluded = ["className", "children", "useZebraStyles", "size", "isSortable", "useStaticWidth", "shouldShowBorder", "stickyHeader", "overflowMenuOnHover"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Table = function Table(_ref) {
  var _cx;

  var className = _ref.className,
      children = _ref.children,
      useZebraStyles = _ref.useZebraStyles,
      size = _ref.size,
      isSortable = _ref.isSortable,
      useStaticWidth = _ref.useStaticWidth,
      shouldShowBorder = _ref.shouldShowBorder,
      stickyHeader = _ref.stickyHeader,
      overflowMenuOnHover = _ref.overflowMenuOnHover,
      other = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var prefix = (0, _usePrefix.usePrefix)();

  var _useState = (0, _react.useState)(true),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isScrollable = _useState2[0],
      setIsScrollable = _useState2[1];

  var tableRef = (0, _react.useRef)(null);
  var componentClass = (0, _classnames.default)("".concat(prefix, "--data-table"), className, (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--data-table--").concat(size), size), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--data-table--sort"), isSortable), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--data-table--zebra"), useZebraStyles), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--data-table--static"), useStaticWidth), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--data-table--no-border"), !shouldShowBorder), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--data-table--sticky-header"), stickyHeader), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--data-table--visible-overflow-menu"), !overflowMenuOnHover), _cx)); // Used to set a tabIndex when the Table is horizontally scrollable

  var setTabIndex = (0, _react.useCallback)(function () {
    var _tableRef$current, _tableRef$current2;

    var tableContainer = tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.parentNode;
    var tableHeader = tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current2 = tableRef.current) === null || _tableRef$current2 === void 0 ? void 0 : _tableRef$current2.firstChild;

    if ((tableHeader === null || tableHeader === void 0 ? void 0 : tableHeader.scrollWidth) > (tableContainer === null || tableContainer === void 0 ? void 0 : tableContainer.clientWidth)) {
      setIsScrollable(true);
    } else {
      setIsScrollable(false);
    }
  }, []);
  var debouncedSetTabIndex = (0, _lodash.default)(setTabIndex, 100);
  (0, _useEvent.useWindowEvent)('resize', debouncedSetTabIndex);
  (0, _react.useLayoutEffect)(function () {
    setTabIndex();
  }, [setTabIndex]);

  var table = /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--data-table-content") // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
    ,
    tabIndex: isScrollable ? 0 : undefined
  }, /*#__PURE__*/_react.default.createElement("table", (0, _extends2.default)({}, other, {
    className: componentClass,
    ref: tableRef
  }), children));

  return stickyHeader ? /*#__PURE__*/_react.default.createElement("section", {
    className: "".concat(prefix, "--data-table_inner-container")
  }, table) : table;
};

exports.Table = Table;
Table.propTypes = {
  /**
   * Pass in the children that will be rendered within the Table
   */
  children: _propTypes.default.node,
  className: _propTypes.default.string,

  /**
   * `false` If true, will apply sorting styles
   */
  isSortable: _propTypes.default.bool,

  /**
   * Specify whether the overflow menu (if it exists) should be shown always, or only on hover
   */
  overflowMenuOnHover: _propTypes.default.bool,

  /**
   * `false` If true, will remove the table border
   */
  shouldShowBorder: (0, _deprecate.default)(_propTypes.default.bool, 'The `shouldShowBorder` prop has been deprecated and can be safely removed.' + 'This prop will be removed in the next major release of ' + '`carbon-components-react`'),

  /**
   *  Change the row height of table. Currently supports `xs`, `sm`, `md`, `lg`, and `xl`.
   */
  size: FeatureFlags.enabled('enable-v11-release') ? _propTypes.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl']) : _propTypes.default.oneOf(['compact', 'short', 'normal', 'tall', 'xs', 'sm', 'md', 'lg', 'xl']),

  /**
   * `false` If true, will keep the header sticky (only data rows will scroll)
   */
  stickyHeader: _propTypes.default.bool,

  /**
   * `false` If true, will use a width of 'auto' instead of 100%
   */
  useStaticWidth: _propTypes.default.bool,

  /**
   * `true` to add useZebraStyles striping.
   */
  useZebraStyles: _propTypes.default.bool
};
Table.defaultProps = {
  isSortable: false,
  overflowMenuOnHover: true
};
var _default = Table;
exports.default = _default;