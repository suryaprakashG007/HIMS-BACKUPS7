"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Usage = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _ = _interopRequireWildcard(require(".."));

var _shared = require("./shared");

var _DataTable = _interopRequireDefault(require("../DataTable.mdx"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var _default = {
  title: 'Components/DataTable/Sorting',
  component: _.default,
  subcomponents: {
    Table: _.Table,
    TableBody: _.TableBody,
    TableCell: _.TableCell,
    TableContainer: _.TableContainer,
    TableHead: _.TableHead,
    TableHeader: _.TableHeader,
    TableRow: _.TableRow
  },
  argTypes: {
    size: {
      options: ['xs', 'sm', 'md', 'lg', 'xl'],
      control: {
        type: 'select'
      }
    },
    useZebraStyles: {
      control: {
        type: 'boolean'
      }
    },
    radio: {
      control: {
        type: 'boolean'
      }
    },
    isSortable: {
      control: {
        type: 'boolean'
      }
    }
  },
  args: {
    size: 'lg',
    useZebraStyles: false,
    radio: false,
    isSortable: true
  },
  parameters: {
    docs: {
      page: _DataTable.default
    }
  }
};
exports.default = _default;

var Usage = function Usage(args) {
  return /*#__PURE__*/_react.default.createElement(_.default, (0, _extends2.default)({
    rows: _shared.rows,
    headers: _shared.headers
  }, args), function (_ref) {
    var rows = _ref.rows,
        headers = _ref.headers,
        getHeaderProps = _ref.getHeaderProps,
        getRowProps = _ref.getRowProps,
        getTableProps = _ref.getTableProps;
    return /*#__PURE__*/_react.default.createElement(_.TableContainer, {
      title: "DataTable",
      description: "With sorting"
    }, /*#__PURE__*/_react.default.createElement(_.Table, getTableProps(), /*#__PURE__*/_react.default.createElement(_.TableHead, null, /*#__PURE__*/_react.default.createElement(_.TableRow, null, headers.map(function (header) {
      return /*#__PURE__*/_react.default.createElement(_.TableHeader, (0, _extends2.default)({
        key: header.key
      }, getHeaderProps({
        header: header
      })), header.header);
    }))), /*#__PURE__*/_react.default.createElement(_.TableBody, null, rows.map(function (row) {
      return /*#__PURE__*/_react.default.createElement(_.TableRow, (0, _extends2.default)({
        key: row.id
      }, getRowProps({
        row: row
      })), row.cells.map(function (cell) {
        return /*#__PURE__*/_react.default.createElement(_.TableCell, {
          key: cell.id
        }, cell.value);
      }));
    }))));
  });
};

exports.Usage = Usage;