"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _iconsReact = require("@carbon/icons-react");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _keyboard = require("../../internal/keyboard");

var _deprecate = _interopRequireDefault(require("../../prop-types/deprecate"));

var _useId = require("../../internal/useId");

var _FeatureFlags = require("../FeatureFlags");

var _usePrefix = require("../../internal/usePrefix");

var _excluded = ["children", "className", "disabled", "iconDescription", "light", "checked", "name", "value", "id", "onChange", "tabIndex"];

function RadioTile(_ref) {
  var _cx;

  var children = _ref.children,
      customClassName = _ref.className,
      disabled = _ref.disabled,
      iconDescription = _ref.iconDescription,
      light = _ref.light,
      checked = _ref.checked,
      name = _ref.name,
      value = _ref.value,
      id = _ref.id,
      onChange = _ref.onChange,
      tabIndex = _ref.tabIndex,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var prefix = (0, _usePrefix.usePrefix)();
  var inputId = (0, _useId.useFallbackId)(id);
  var enabled = (0, _FeatureFlags.useFeatureFlag)('enable-v11-release');
  var className = (0, _classnames.default)(customClassName, "".concat(prefix, "--tile"), "".concat(prefix, "--tile--selectable"), (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--tile--is-selected"), checked), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--tile--light"), light), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--tile--disabled"), disabled), _cx));
  var inputProps = enabled ? {} : rest;
  var labelProps = enabled ? rest : {};

  function handleOnChange(evt) {
    onChange(value, name, evt);
  }

  function handleOnKeyDown(evt) {
    if ((0, _keyboard.matches)(evt, [_keyboard.keys.Enter, _keyboard.keys.Space])) {
      evt.preventDefault();
      onChange(value, name, evt);
    }
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("input", (0, _extends2.default)({}, inputProps, {
    checked: checked,
    className: "".concat(prefix, "--tile-input"),
    disabled: disabled,
    id: inputId,
    name: name,
    onChange: !disabled ? handleOnChange : null,
    onKeyDown: !disabled ? handleOnKeyDown : null,
    tabIndex: !disabled ? tabIndex : null,
    type: "radio",
    value: value
  })), /*#__PURE__*/_react.default.createElement("label", (0, _extends2.default)({}, labelProps, {
    htmlFor: inputId,
    className: className
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "".concat(prefix, "--tile__checkmark")
  }, /*#__PURE__*/_react.default.createElement(_iconsReact.CheckmarkFilled16, null)), /*#__PURE__*/_react.default.createElement("span", {
    className: "".concat(prefix, "--tile-content")
  }, children)));
}

RadioTile.propTypes = {
  /**
   * `true` if this tile should be selected.
   */
  checked: _propTypes.default.bool,

  /**
   * The tile content.
   */
  children: _propTypes.default.node,

  /**
   * The CSS class names.
   */
  className: _propTypes.default.string,

  /**
   * `true` if the `<input>` should be checked at initialization.
   */
  defaultChecked: _propTypes.default.bool,

  /**
   * Specify whether the RadioTile should be disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * The description of the tile checkmark icon.
   */
  iconDescription: (0, _deprecate.default)(_propTypes.default.string, 'The `iconDescription` prop for `RadioTile` is no longer needed and has ' + 'been deprecated. It will be moved in the next major release.'),

  /**
   * The ID of the `<input>`.
   */
  id: _propTypes.default.string,

  /**
   * `true` to use the light version. For use on $ui-01 backgrounds only.
   * Don't use this to make tile background color same as container background color.
   */
  light: _propTypes.default.bool,

  /**
   * The `name` of the `<input>`.
   */
  name: _propTypes.default.string,

  /**
   * The handler of the massaged `change` event on the `<input>`.
   */
  onChange: _propTypes.default.func,

  /**
   * Specify the tab index of the wrapper element
   */
  tabIndex: _propTypes.default.number,

  /**
   * The `value` of the `<input>`.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired
};
RadioTile.defaultProps = {
  onChange: function onChange() {},
  tabIndex: 0,
  light: false
};
var _default = RadioTile;
exports.default = _default;