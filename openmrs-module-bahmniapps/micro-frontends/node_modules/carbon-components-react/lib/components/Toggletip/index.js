"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toggletip = Toggletip;
exports.ToggletipActions = ToggletipActions;
exports.ToggletipButton = ToggletipButton;
exports.ToggletipContent = ToggletipContent;
exports.ToggletipLabel = ToggletipLabel;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Popover = require("../Popover");

var _keyboard = require("../../internal/keyboard");

var _useEvent = require("../../internal/useEvent");

var _useId = require("../../internal/useId");

var _usePrefix = require("../../internal/usePrefix");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Used to render the label for a Toggletip
 */
function ToggletipLabel(_ref) {
  var _ref$as = _ref.as,
      BaseComponent = _ref$as === void 0 ? 'span' : _ref$as,
      children = _ref.children,
      customClassName = _ref.className;
  var prefix = (0, _usePrefix.usePrefix)();
  var className = (0, _classnames.default)("".concat(prefix, "--toggletip-label"), customClassName);
  return /*#__PURE__*/_react.default.createElement(BaseComponent, {
    className: className
  }, children);
}

ToggletipLabel.propTypes = {
  /**
   * Provide a custom element or component to render the top-level node for the
   * component.
   */
  as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.elementType]),

  /**
   * Custom children to be rendered as the content of the label
   */
  children: _propTypes.default.node,

  /**
   * Provide a custom class name to be added to the outermost node in the
   * component
   */
  className: _propTypes.default.string
}; // Used to coordinate accessibility props between button and content along with
// the actions to open and close the toggletip

var ToggletipContext = /*#__PURE__*/_react.default.createContext();

function useToggletip() {
  return (0, _react.useContext)(ToggletipContext);
}
/**
 * Used as a container for the button and content of a toggletip. This component
 * is responsible for coordinating between interactions with the button and the
 * visibility of the content
 */


function Toggletip(_ref2) {
  var align = _ref2.align,
      as = _ref2.as,
      customClassName = _ref2.className,
      children = _ref2.children,
      _ref2$defaultOpen = _ref2.defaultOpen,
      defaultOpen = _ref2$defaultOpen === void 0 ? false : _ref2$defaultOpen;
  var ref = (0, _react.useRef)();

  var _useState = (0, _react.useState)(defaultOpen),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var prefix = (0, _usePrefix.usePrefix)();
  var id = (0, _useId.useId)();
  var className = (0, _classnames.default)("".concat(prefix, "--toggletip"), customClassName, (0, _defineProperty2.default)({}, "".concat(prefix, "--toggletip--open"), open));
  var actions = {
    toggle: function toggle() {
      setOpen(!open);
    },
    close: function close() {
      setOpen(false);
    }
  };
  var value = {
    buttonProps: {
      'aria-expanded': open,
      'aria-controls': id,
      onClick: actions.toggle
    },
    contentProps: {
      id: id
    }
  };

  function onKeyDown(event) {
    if (open && (0, _keyboard.match)(event, _keyboard.keys.Escape)) {
      actions.close();
    }
  }

  (0, _useEvent.useWindowEvent)('click', function (event) {
    if (open && !ref.current.contains(event.target)) {
      actions.close();
    }
  });
  return /*#__PURE__*/_react.default.createElement(ToggletipContext.Provider, {
    value: value
  }, /*#__PURE__*/_react.default.createElement(_Popover.Popover, {
    align: align,
    as: as,
    caret: true,
    className: className,
    dropShadow: false,
    highContrast: true,
    open: open,
    onKeyDown: onKeyDown,
    ref: ref
  }, children));
}

Toggletip.propTypes = {
  /**
   * Specify how the toggletip should align with the button
   */
  align: _propTypes.default.oneOf(['top', 'bottom', 'left', 'right']),

  /**
   * Provide a custom element or component to render the top-level node for the
   * component.
   */
  as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.elementType]),

  /**
   * Custom children to be rendered as the content of the label
   */
  children: _propTypes.default.node,

  /**
   * Provide a custom class name to be added to the outermost node in the
   * component
   */
  className: _propTypes.default.string,

  /**
   * Specify if the toggletip should be open by default
   */
  defaultOpen: _propTypes.default.bool
};
/**
 * `ToggletipButton` controls the visibility of the Toggletip through mouse
 * clicks and keyboard interactions.
 */

function ToggletipButton(_ref3) {
  var children = _ref3.children,
      customClassName = _ref3.className,
      _ref3$label = _ref3.label,
      label = _ref3$label === void 0 ? 'Show information' : _ref3$label;
  var toggletip = useToggletip();
  var prefix = (0, _usePrefix.usePrefix)();
  var className = (0, _classnames.default)("".concat(prefix, "--toggletip-button"), customClassName);
  return /*#__PURE__*/_react.default.createElement("button", (0, _extends2.default)({}, toggletip.buttonProps, {
    "aria-label": label,
    type: "button",
    className: className
  }), children);
}

ToggletipButton.propTypes = {
  /**
   * Custom children to be rendered as the content of the label
   */
  children: _propTypes.default.node,

  /**
   * Provide a custom class name to be added to the outermost node in the
   * component
   */
  className: _propTypes.default.string,

  /**
   * Provide an accessible label for this button
   */
  label: _propTypes.default.string
};
/**
 * `ToggletipContent` is a wrapper around `PopoverContent`. It places the
 * `children` passed in as a prop inside of `PopoverContent` so that they will
 * be rendered inside of the popover for this component.
 */

function ToggletipContent(_ref4) {
  var children = _ref4.children,
      customClassName = _ref4.className;
  var toggletip = useToggletip();
  var prefix = (0, _usePrefix.usePrefix)();
  return /*#__PURE__*/_react.default.createElement(_Popover.PopoverContent, (0, _extends2.default)({
    className: customClassName
  }, toggletip.contentProps), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--toggletip-content")
  }, children));
}

ToggletipContent.propTypes = {
  /**
   * Custom children to be rendered as the content of the label
   */
  children: _propTypes.default.node,

  /**
   * Provide a custom class name to be added to the outermost node in the
   * component
   */
  className: _propTypes.default.string
};
/**
 * `ToggletipActions` is a container for one or two actions present at the base
 * of a toggletip. It is used for layout of these items.
 */

function ToggletipActions(_ref5) {
  var children = _ref5.children,
      customClassName = _ref5.className;
  var prefix = (0, _usePrefix.usePrefix)();
  var className = (0, _classnames.default)("".concat(prefix, "--toggletip-actions"), customClassName);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: className
  }, children);
}

ToggletipActions.propTypes = {
  /**
   * Custom children to be rendered as the content of the label
   */
  children: _propTypes.default.node,

  /**
   * Provide a custom class name to be added to the outermost node in the
   * component
   */
  className: _propTypes.default.string
};