"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _keyboard = require("../../internal/keyboard");

var _warning = require("../../internal/warning");

var _usePrefix = require("../../internal/usePrefix");

var _ToggleSmall$propType;

var _excluded = ["className", "defaultToggled", "toggled", "onChange", "onToggle", "id", "labelText", "labelA", "labelB"];
var didWarnAboutDeprecation = false;

var ToggleSmall = function ToggleSmall(_ref) {
  var className = _ref.className,
      defaultToggled = _ref.defaultToggled,
      toggled = _ref.toggled,
      _onChange = _ref.onChange,
      onToggle = _ref.onToggle,
      id = _ref.id,
      labelText = _ref.labelText,
      labelA = _ref.labelA,
      labelB = _ref.labelB,
      other = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var prefix = (0, _usePrefix.usePrefix)();

  if (process.env.NODE_ENV !== "production") {
    process.env.NODE_ENV !== "production" ? (0, _warning.warning)(didWarnAboutDeprecation, '`<ToggleSmall>` has been deprecated in favor of `<Toggle size="sm" />` and will be removed in the next major release of `carbon-components-react`') : void 0;
    didWarnAboutDeprecation = true;
  }

  var input;
  var wrapperClasses = (0, _classnames.default)("".concat(prefix, "--form-item"), (0, _defineProperty2.default)({}, className, className));
  var checkedProps = {};

  if (typeof toggled !== 'undefined') {
    checkedProps.checked = toggled;
  } else {
    checkedProps.defaultChecked = defaultToggled;
  }

  var ariaLabel = typeof labelText === 'string' && labelText || other['aria-label'] || other.ariaLabel || null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: wrapperClasses
  }, /*#__PURE__*/_react.default.createElement("input", (0, _extends2.default)({}, other, checkedProps, {
    "aria-label": null,
    type: "checkbox",
    id: id,
    className: "".concat(prefix, "--toggle-input ").concat(prefix, "--toggle-input--small"),
    onChange: function onChange(evt) {
      _onChange && _onChange(evt);
      onToggle(input.checked, id, evt);
    },
    ref: function ref(el) {
      input = el;
    },
    onKeyUp: function onKeyUp(evt) {
      if ((0, _keyboard.match)(evt, _keyboard.keys.Enter)) {
        input.checked = !input.checked;
        _onChange && _onChange(evt);
        onToggle(input.checked, id, evt);
      }
    }
  })), /*#__PURE__*/_react.default.createElement("label", {
    className: "".concat(prefix, "--toggle-input__label"),
    htmlFor: id,
    "aria-label": ariaLabel
  }, labelText, /*#__PURE__*/_react.default.createElement("span", {
    className: "".concat(prefix, "--toggle__switch")
  }, /*#__PURE__*/_react.default.createElement("svg", {
    className: "".concat(prefix, "--toggle__check"),
    width: "6px",
    height: "5px",
    viewBox: "0 0 6 5"
  }, /*#__PURE__*/_react.default.createElement("path", {
    d: "M2.2 2.7L5 0 6 1 2.2 5 0 2.7 1 1.5z"
  })), /*#__PURE__*/_react.default.createElement("span", {
    className: "".concat(prefix, "--toggle__text--off"),
    "aria-hidden": "true"
  }, labelA), /*#__PURE__*/_react.default.createElement("span", {
    className: "".concat(prefix, "--toggle__text--on"),
    "aria-hidden": "true"
  }, labelB))));
};

ToggleSmall.propTypes = (_ToggleSmall$propType = {}, (0, _defineProperty2.default)(_ToggleSmall$propType, 'aria-label', _propTypes.default.string.isRequired), (0, _defineProperty2.default)(_ToggleSmall$propType, "className", _propTypes.default.string), (0, _defineProperty2.default)(_ToggleSmall$propType, "defaultToggled", _propTypes.default.bool), (0, _defineProperty2.default)(_ToggleSmall$propType, "id", _propTypes.default.string.isRequired), (0, _defineProperty2.default)(_ToggleSmall$propType, "labelA", _propTypes.default.node.isRequired), (0, _defineProperty2.default)(_ToggleSmall$propType, "labelB", _propTypes.default.node.isRequired), (0, _defineProperty2.default)(_ToggleSmall$propType, "labelText", _propTypes.default.node), (0, _defineProperty2.default)(_ToggleSmall$propType, "onChange", _propTypes.default.func), (0, _defineProperty2.default)(_ToggleSmall$propType, "onToggle", _propTypes.default.func), (0, _defineProperty2.default)(_ToggleSmall$propType, "toggled", _propTypes.default.bool), _ToggleSmall$propType);
ToggleSmall.defaultProps = {
  defaultToggled: false,
  onToggle: function onToggle() {},
  labelA: 'Off',
  labelB: 'On'
};
var _default = ToggleSmall;
exports.default = _default;