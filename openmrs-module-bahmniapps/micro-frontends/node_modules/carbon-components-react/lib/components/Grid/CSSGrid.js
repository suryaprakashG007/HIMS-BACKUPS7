"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CSSGrid = CSSGrid;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _usePrefix = require("../../internal/usePrefix");

var _GridContext = require("./GridContext");

var _excluded = ["as", "children", "className", "condensed", "fullWidth", "narrow"],
    _excluded2 = ["as", "className", "children", "mode"];

function CSSGrid(_ref) {
  var _cx;

  var _ref$as = _ref.as,
      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,
      children = _ref.children,
      customClassName = _ref.className,
      _ref$condensed = _ref.condensed,
      condensed = _ref$condensed === void 0 ? false : _ref$condensed,
      _ref$fullWidth = _ref.fullWidth,
      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
      _ref$narrow = _ref.narrow,
      narrow = _ref$narrow === void 0 ? false : _ref$narrow,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var prefix = (0, _usePrefix.usePrefix)();

  var _useGridSettings = (0, _GridContext.useGridSettings)(),
      subgrid = _useGridSettings.subgrid;

  var mode = 'wide';

  if (narrow) {
    mode = 'narrow';
  } else if (condensed) {
    mode = 'condensed';
  }

  if (subgrid) {
    return /*#__PURE__*/_react.default.createElement(_GridContext.GridSettings, {
      mode: "css-grid",
      subgrid: true
    }, /*#__PURE__*/_react.default.createElement(Subgrid, (0, _extends2.default)({
      as: BaseComponent,
      className: customClassName,
      mode: mode
    }, rest), children));
  }

  var className = (0, _classnames.default)(customClassName, (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--css-grid"), true), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--css-grid--condensed"), mode === 'condensed'), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--css-grid--narrow"), mode === 'narrow'), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--css-grid--full-width"), fullWidth), _cx));
  return /*#__PURE__*/_react.default.createElement(_GridContext.GridSettings, {
    mode: "css-grid",
    subgrid: true
  }, /*#__PURE__*/_react.default.createElement(BaseComponent, (0, _extends2.default)({
    className: className
  }, rest), children));
}

CSSGrid.propTypes = {
  /**
   * Provide a custom element to render instead of the default <div>
   */
  as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.elementType]),

  /**
   * Pass in content that will be rendered within the `Grid`
   */
  children: _propTypes.default.node,

  /**
   * Specify a custom className to be applied to the `Grid`
   */
  className: _propTypes.default.string,

  /**
   * Collapse the gutter to 1px. Useful for fluid layouts.
   * Rows have 1px of margin between them to match gutter.
   */
  condensed: _propTypes.default.bool,

  /**
   * Remove the default max width that the grid has set
   */
  fullWidth: _propTypes.default.bool,

  /**
   * Container hangs 16px into the gutter. Useful for
   * typographic alignment with and without containers.
   */
  narrow: _propTypes.default.bool
};

function Subgrid(_ref2) {
  var _cx2;

  var _ref2$as = _ref2.as,
      BaseComponent = _ref2$as === void 0 ? 'div' : _ref2$as,
      customClassName = _ref2.className,
      children = _ref2.children,
      mode = _ref2.mode,
      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  var prefix = (0, _usePrefix.usePrefix)();
  var className = (0, _classnames.default)(customClassName, (_cx2 = {}, (0, _defineProperty2.default)(_cx2, "".concat(prefix, "--subgrid"), true), (0, _defineProperty2.default)(_cx2, "".concat(prefix, "--subgrid--condensed"), mode === 'condensed'), (0, _defineProperty2.default)(_cx2, "".concat(prefix, "--subgrid--narrow"), mode === 'narrow'), (0, _defineProperty2.default)(_cx2, "".concat(prefix, "--subgrid--wide"), mode === 'wide'), _cx2));
  return /*#__PURE__*/_react.default.createElement(BaseComponent, (0, _extends2.default)({}, rest, {
    className: className
  }), children);
}

Subgrid.propTypes = {
  /**
   * Provide a custom element to render instead of the default <div>
   */
  as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.elementType]),

  /**
   * Pass in content that will be rendered within the `Subgrid`
   */
  children: _propTypes.default.node,

  /**
   * Specify a custom className to be applied to the `Subgrid`
   */
  className: _propTypes.default.string,

  /**
   * Specify the grid mode for the subgrid
   */
  mode: _propTypes.default.oneOf(['wide', 'narrow', 'condensed'])
};