"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof3 = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var FeatureFlags = _interopRequireWildcard(require("@carbon/feature-flags"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _usePrefix = require("../../internal/usePrefix");

var _GridContext = require("./GridContext");

var _excluded = ["as", "children", "className", "sm", "md", "lg", "xlg", "max"],
    _excluded2 = ["as", "children", "className", "sm", "md", "lg", "xlg", "max", "span"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Column(_ref) {
  var _ref$as = _ref.as,
      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,
      children = _ref.children,
      customClassName = _ref.className,
      sm = _ref.sm,
      md = _ref.md,
      lg = _ref.lg,
      xlg = _ref.xlg,
      max = _ref.max,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _useGridSettings = (0, _GridContext.useGridSettings)(),
      mode = _useGridSettings.mode;

  var prefix = (0, _usePrefix.usePrefix)();

  if (mode === 'css-grid') {
    return /*#__PURE__*/_react.default.createElement(CSSGridColumn, (0, _extends2.default)({
      as: BaseComponent,
      className: customClassName,
      sm: sm,
      md: md,
      lg: lg,
      xlg: xlg,
      max: max
    }, rest), children);
  }

  var columnClassName = getClassNameForFlexGridBreakpoints([sm, md, lg, xlg, max], prefix);
  var className = (0, _classnames.default)(customClassName, columnClassName, (0, _defineProperty2.default)({}, "".concat(prefix, "--col"), columnClassName.length === 0));
  return /*#__PURE__*/_react.default.createElement(BaseComponent, (0, _extends2.default)({
    className: className
  }, rest), children);
}

var percentSpanType = _propTypes.default.oneOf(['25%', '50%', '75%', '100%']);

var spanPropType = FeatureFlags.enabled('enable-css-grid') ? _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number, _propTypes.default.shape({
  span: _propTypes.default.oneOfType([_propTypes.default.number, percentSpanType]),
  offset: _propTypes.default.number,
  start: _propTypes.default.number,
  end: _propTypes.default.number
}), percentSpanType]) : _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number, _propTypes.default.shape({
  span: _propTypes.default.number,
  offset: _propTypes.default.number
})]);
Column.propTypes = {
  /**
   * Provide a custom element to render instead of the default <div>
   */
  as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.elementType]),

  /**
   * Pass in content that will be rendered within the `Column`
   */
  children: _propTypes.default.node,

  /**
   * Specify a custom className to be applied to the `Column`
   */
  className: _propTypes.default.string,

  /**
   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)
   * This breakpoint supports 16 columns by default.
   *
   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints
   */
  lg: spanPropType,

  /**
   * Specify column span for the `max` breakpoint. This breakpoint supports 16
   * columns by default.
   *
   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints
   */
  max: spanPropType,

  /**
   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)
   * This breakpoint supports 8 columns by default.
   *
   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints
   */
  md: spanPropType,

  /**
   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)
   * This breakpoint supports 4 columns by default.
   *
   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints
   */
  sm: spanPropType,

  /**
   * Specify column span for the `xlg` breakpoint (Default breakpoint up to
   * 1584px) This breakpoint supports 16 columns by default.
   *
   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints
   */
  xlg: spanPropType
};

function CSSGridColumn(_ref2) {
  var _ref2$as = _ref2.as,
      BaseComponent = _ref2$as === void 0 ? 'div' : _ref2$as,
      children = _ref2.children,
      containerClassName = _ref2.className,
      sm = _ref2.sm,
      md = _ref2.md,
      lg = _ref2.lg,
      xlg = _ref2.xlg,
      max = _ref2.max,
      span = _ref2.span,
      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  var prefix = (0, _usePrefix.usePrefix)();
  var breakpointClassName = getClassNameForBreakpoints([sm, md, lg, xlg, max], prefix);
  var spanClassName = getClassNameForSpan(span, prefix);
  var className = (0, _classnames.default)(containerClassName, breakpointClassName, spanClassName, (0, _defineProperty2.default)({}, "".concat(prefix, "--css-grid-column"), true));
  return /*#__PURE__*/_react.default.createElement(BaseComponent, (0, _extends2.default)({
    className: className
  }, rest), children);
}

CSSGridColumn.propTypes = {
  /**
   * Provide a custom element to render instead of the default <div>
   */
  as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.elementType]),

  /**
   * Pass in content that will be rendered within the `Column`
   */
  children: _propTypes.default.node,

  /**
   * Specify a custom className to be applied to the `Column`
   */
  className: _propTypes.default.string,

  /**
   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)
   * This breakpoint supports 16 columns by default.
   *
   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints
   */
  lg: spanPropType,

  /**
   * Specify column span for the `max` breakpoint. This breakpoint supports 16
   * columns by default.
   *
   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints
   */
  max: spanPropType,

  /**
   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)
   * This breakpoint supports 8 columns by default.
   *
   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints
   */
  md: spanPropType,

  /**
   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)
   * This breakpoint supports 4 columns by default.
   *
   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints
   */
  sm: spanPropType,

  /**
   * Specify constant column span, start,  or end values that will not change
   * based on breakpoint
   */
  span: _propTypes.default.oneOfType([_propTypes.default.number, percentSpanType, _propTypes.default.shape({
    span: _propTypes.default.oneOfType([_propTypes.default.number, percentSpanType]),
    start: _propTypes.default.number,
    end: _propTypes.default.number
  })]),

  /**
   * Specify column span for the `xlg` breakpoint (Default breakpoint up to
   * 1584px) This breakpoint supports 16 columns by default.
   *
   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints
   */
  xlg: spanPropType
};
var breakpointNames = ['sm', 'md', 'lg', 'xlg', 'max'];
/**
 * @typedef {object} Breakpoint
 * @property {boolean|number} [span]
 * @property {number} [offset]
 */

/**
 * Build the appropriate className for the given set of breakpoints.
 * @param {Array<boolean|number|Breakpoint>} breakpoints
 * @returns {string}
 */

function getClassNameForBreakpoints(breakpoints, prefix) {
  var classNames = [];

  for (var i = 0; i < breakpoints.length; i++) {
    var breakpoint = breakpoints[i];

    if (breakpoint === undefined || breakpoint === null) {
      continue;
    }

    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column
    // should be "auto" at this size

    if (breakpoint === true) {
      classNames.push("".concat(prefix, "--").concat(name, ":col-span-auto"));
      continue;
    } // If our breakpoint is a string, the user has specified a percent
    // they'd like this column to span.


    if (typeof breakpoint === 'string') {
      classNames.push("".concat(prefix, "--").concat(name, ":col-span-").concat(breakpoint.slice(0, -1)));
      continue;
    } // If our breakpoint is a number, the user has specified the number of
    // columns they'd like this column to span


    if (typeof breakpoint === 'number') {
      classNames.push("".concat(prefix, "--").concat(name, ":col-span-").concat(breakpoint));
      continue;
    }

    var span = breakpoint.span,
        offset = breakpoint.offset,
        start = breakpoint.start,
        end = breakpoint.end;

    if (typeof offset === 'number' && offset > 0) {
      classNames.push("".concat(prefix, "--").concat(name, ":col-start-").concat(offset + 1));
    }

    if (typeof start === 'number') {
      classNames.push("".concat(prefix, "--").concat(name, ":col-start-").concat(start));
    }

    if (typeof end === 'number') {
      classNames.push("".concat(prefix, "--").concat(name, ":col-end-").concat(end));
    }

    if (typeof span === 'number') {
      classNames.push("".concat(prefix, "--").concat(name, ":col-span-").concat(span));
    } else if (typeof span === 'string') {
      classNames.push("".concat(prefix, "--").concat(name, ":col-span-").concat(span.slice(0, -1)));
      continue;
    }
  }

  return classNames.join(' ');
}
/**
 * Build the appropriate className for the given set of breakpoints.
 * @param {Array<boolean|number|Breakpoint>} breakpoints
 * @returns {string}
 */


function getClassNameForFlexGridBreakpoints(breakpoints, prefix) {
  var classNames = [];

  for (var i = 0; i < breakpoints.length; i++) {
    var breakpoint = breakpoints[i];

    if (breakpoint === undefined || breakpoint === null) {
      continue;
    }

    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column
    // should be "auto" at this size

    if (breakpoint === true) {
      classNames.push("".concat(prefix, "--col-").concat(name));
      continue;
    } // If our breakpoint is a number, the user has specified the number of
    // columns they'd like this column to span


    if (typeof breakpoint === 'number') {
      classNames.push("".concat(prefix, "--col-").concat(name, "-").concat(breakpoint));
      continue;
    }

    var span = breakpoint.span,
        offset = breakpoint.offset;

    if (typeof span === 'number') {
      classNames.push("".concat(prefix, "--col-").concat(name, "-").concat(span));
    }

    if (span === true) {
      classNames.push("".concat(prefix, "--col-").concat(name));
    }

    if (typeof offset === 'number') {
      classNames.push("".concat(prefix, "--offset-").concat(name, "-").concat(offset));
    }
  }

  return classNames.join(' ');
}
/**
 * Build the appropriate className for a span value
 */


function getClassNameForSpan(value, prefix) {
  var classNames = [];

  if (typeof value === 'number' || typeof value === 'string') {
    classNames.push("".concat(prefix, "--col-span-").concat(value));
  } else if ((0, _typeof2.default)(value) === 'object') {
    var span = value.span,
        start = value.start,
        end = value.end;

    if (span !== undefined && span !== null) {
      classNames.push("".concat(prefix, "--col-span-").concat(span));
    }

    if (start !== undefined && start !== null) {
      classNames.push("".concat(prefix, "--col-start-").concat(start));
    }

    if (end !== undefined && end !== null) {
      classNames.push("".concat(prefix, "--col-end-").concat(end));
    }
  }

  return classNames.join('');
}

var _default = Column;
exports.default = _default;