"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty4 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _usePrefix = require("../../internal/usePrefix");

var _defineProperty2, _defineProperty3;

var _excluded = ["id", "labelText", "className", "size"];

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ToggleSkeleton = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(ToggleSkeleton, _React$Component);

  var _super = _createSuper(ToggleSkeleton);

  function ToggleSkeleton() {
    (0, _classCallCheck2.default)(this, ToggleSkeleton);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(ToggleSkeleton, [{
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          id = _this$props.id,
          labelText = _this$props.labelText,
          className = _this$props.className,
          size = _this$props.size,
          rest = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      return /*#__PURE__*/_react.default.createElement(_usePrefix.PrefixContext.Consumer, null, function (prefix) {
        var toggleInputClassNames = (0, _classnames.default)("".concat(prefix, "--toggle ").concat(prefix, "--skeleton"), (0, _defineProperty4.default)({}, "".concat(prefix, "--toggle-input--small"), size === 'sm'));
        return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
          className: (0, _classnames.default)("".concat(prefix, "--form-item"), className)
        }, rest), /*#__PURE__*/_react.default.createElement("input", {
          type: "checkbox",
          id: id,
          className: toggleInputClassNames
        }), /*#__PURE__*/_react.default.createElement("label", {
          className: "".concat(prefix, "--toggle-input__label"),
          htmlFor: id,
          "aria-label": labelText ? null : _this.props['aria-label']
        }, labelText ? /*#__PURE__*/_react.default.createElement("div", null, labelText) : null, /*#__PURE__*/_react.default.createElement("span", {
          className: "".concat(prefix, "--toggle__switch")
        }, /*#__PURE__*/_react.default.createElement("span", {
          className: "".concat(prefix, "--toggle__text--left")
        }), /*#__PURE__*/_react.default.createElement("span", {
          className: "".concat(prefix, "--toggle__appearance")
        }), /*#__PURE__*/_react.default.createElement("span", {
          className: "".concat(prefix, "--toggle__text--right")
        }))));
      });
    }
  }]);
  return ToggleSkeleton;
}(_react.default.Component);

exports.default = ToggleSkeleton;
(0, _defineProperty4.default)(ToggleSkeleton, "propTypes", (_defineProperty2 = {}, (0, _defineProperty4.default)(_defineProperty2, 'aria-label', _propTypes.default.string.isRequired), (0, _defineProperty4.default)(_defineProperty2, "className", _propTypes.default.string), (0, _defineProperty4.default)(_defineProperty2, "id", _propTypes.default.string), (0, _defineProperty4.default)(_defineProperty2, "labelText", _propTypes.default.string), (0, _defineProperty4.default)(_defineProperty2, "size", _propTypes.default.oneOf(['sm', 'md'])), _defineProperty2));
(0, _defineProperty4.default)(ToggleSkeleton, "defaultProps", (_defineProperty3 = {}, (0, _defineProperty4.default)(_defineProperty3, 'aria-label', 'Toggle is loading'), (0, _defineProperty4.default)(_defineProperty3, "size", 'md'), _defineProperty3));