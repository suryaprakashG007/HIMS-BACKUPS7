"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _keyboard = require("../../internal/keyboard");

var _uniqueId = _interopRequireDefault(require("../../tools/uniqueId"));

var _usePrefix = require("../../internal/usePrefix");

var _events = require("../../tools/events");

var _deprecate = _interopRequireDefault(require("../../prop-types/deprecate"));

var _excluded = ["accept", "className", "id", "disabled", "labelText", "multiple", "name", "onAddFiles", "onClick", "pattern"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function FileUploaderDropContainer(_ref) {
  var _classNames;

  var accept = _ref.accept,
      className = _ref.className,
      id = _ref.id,
      disabled = _ref.disabled,
      labelText = _ref.labelText,
      multiple = _ref.multiple,
      name = _ref.name,
      onAddFiles = _ref.onAddFiles,
      onClick = _ref.onClick,
      pattern = _ref.pattern,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var prefix = (0, _usePrefix.usePrefix)();
  var inputRef = (0, _react.useRef)(null);

  var _useRef = (0, _react.useRef)(id || (0, _uniqueId.default)()),
      uid = _useRef.current;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isActive = _useState2[0],
      setActive = _useState2[1];

  var dropareaClasses = (0, _classnames.default)("".concat(prefix, "--file__drop-container"), "".concat(prefix, "--file-browse-btn"), (_classNames = {}, (0, _defineProperty2.default)(_classNames, "".concat(prefix, "--file__drop-container--drag-over"), isActive), (0, _defineProperty2.default)(_classNames, "".concat(prefix, "--file-browse-btn--disabled"), disabled), (0, _defineProperty2.default)(_classNames, className, className), _classNames));
  /**
   * Filters the array of added files based on file type restrictions
   * @param {Event} event - Event object, used to get the list of files added
   */

  function validateFiles(event) {
    var transferredFiles = event.type === 'drop' ? (0, _toConsumableArray2.default)(event.dataTransfer.files) : (0, _toConsumableArray2.default)(event.target.files);

    if (!accept.length) {
      return transferredFiles;
    }

    var acceptedTypes = new Set(accept);
    return transferredFiles.reduce(function (acc, curr) {
      var name = curr.name,
          _curr$type = curr.type,
          mimeType = _curr$type === void 0 ? '' : _curr$type;
      var fileExtensionRegExp = new RegExp(pattern, 'i');
      var hasFileExtension = fileExtensionRegExp.test(name);

      if (!hasFileExtension) {
        return acc;
      }

      var _name$match = name.match(fileExtensionRegExp),
          _name$match2 = (0, _slicedToArray2.default)(_name$match, 1),
          fileExtension = _name$match2[0];

      if (acceptedTypes.has(mimeType) || acceptedTypes.has(fileExtension)) {
        return acc.concat([curr]);
      }

      curr.invalidFileType = true;
      return acc.concat([curr]);
    }, []);
  }

  function handleChange(event) {
    var addedFiles = validateFiles(event);
    return onAddFiles(event, {
      addedFiles: addedFiles
    });
  }

  var handleClick = function handleClick() {
    if (!disabled) {
      inputRef.current.click();
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--file"),
    onDragOver: function onDragOver(evt) {
      evt.stopPropagation();
      evt.preventDefault();

      if (disabled) {
        return;
      }

      setActive(true);
      evt.dataTransfer.dropEffect = 'copy';
    },
    onDragLeave: function onDragLeave(evt) {
      evt.stopPropagation();
      evt.preventDefault();

      if (disabled) {
        return;
      }

      setActive(false);
      evt.dataTransfer.dropEffect = 'move';
    },
    onDrop: function onDrop(evt) {
      evt.stopPropagation();
      evt.preventDefault();

      if (disabled) {
        return;
      }

      setActive(false);
      handleChange(evt);
    }
  }, /*#__PURE__*/_react.default.createElement("button", (0, _extends2.default)({
    type: "button",
    className: dropareaClasses,
    onKeyDown: function onKeyDown(evt) {
      if ((0, _keyboard.matches)(evt, [_keyboard.keys.Enter, _keyboard.keys.Space])) {
        evt.preventDefault();
        inputRef.current.click();
      }
    },
    onClick: (0, _events.composeEventHandlers)([onClick, handleClick])
  }, rest), labelText), /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: uid,
    className: "".concat(prefix, "--visually-hidden")
  }, labelText), /*#__PURE__*/_react.default.createElement("input", {
    type: "file",
    id: uid,
    className: "".concat(prefix, "--file-input"),
    ref: inputRef,
    tabIndex: "-1",
    disabled: disabled,
    accept: accept,
    name: name,
    multiple: multiple,
    onChange: handleChange,
    onClick: function onClick(evt) {
      evt.target.value = null;
    }
  }));
}

FileUploaderDropContainer.propTypes = {
  /**
   * Specify the types of files that this input should be able to receive
   */
  accept: _propTypes.default.arrayOf(_propTypes.default.string),

  /**
   * Provide a custom className to be applied to the container node
   */
  className: _propTypes.default.string,

  /**
   * Specify whether file input is disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * Provide a unique id for the underlying `<input>` node
   */
  id: _propTypes.default.string,

  /**
   * Provide the label text to be read by screen readers when interacting with
   * this control
   */
  labelText: _propTypes.default.string.isRequired,

  /**
   * Specify if the component should accept multiple files to upload
   */
  multiple: _propTypes.default.bool,

  /**
   * Provide a name for the underlying `<input>` node
   */
  name: _propTypes.default.string,

  /**
   * Event handler that is called after files are added to the uploader
   * The event handler signature looks like `onAddFiles(evt, { addedFiles })`
   */
  onAddFiles: _propTypes.default.func,

  /**
   * Provide an optional function to be called when the button element
   * is clicked
   */
  onClick: _propTypes.default.func,

  /**
   * Provide a custom regex pattern for the acceptedTypes
   */
  pattern: _propTypes.default.string,

  /**
   * Provide an accessibility role for the <FileUploaderButton>
   */
  role: (0, _deprecate.default)(_propTypes.default.number, 'The `role` prop for `FileUploaderButton` has ' + 'been deprecated since it now renders a button element by default, and has an implicit role of button.'),

  /**
   * Provide a custom tabIndex value for the <FileUploaderButton>
   */
  tabIndex: (0, _deprecate.default)(_propTypes.default.number, 'The `tabIndex` prop for `FileUploaderButton` has ' + 'been deprecated since it now renders a button element by default.')
};
FileUploaderDropContainer.defaultProps = {
  labelText: 'Add file',
  multiple: false,
  onAddFiles: function onAddFiles() {},
  accept: [],
  pattern: '.[0-9a-z]+$'
};
var _default = FileUploaderDropContainer;
exports.default = _default;