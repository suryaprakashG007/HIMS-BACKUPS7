import { findByText, fireEvent } from '@testing-library/dom';

/** Simulate user events on react-select dropdowns */

function getReactSelectContainerFromInput(input) {
  return input.parentNode.parentNode.parentNode.parentNode.parentNode;
} // focus the `react-select` input field


const focus = input => {
  fireEvent.focus(input);
  fireEvent.keyDown(input, {
    key: "ArrowDown",
    keyCode: 40,
    code: 40
  });
}; // type text in the input field


const type = (input, text) => {
  fireEvent.change(input, {
    target: {
      value: text
    }
  });
};
/**
 * Utility for selecting a value in a `react-select` dropdown.
 * @param input The input field (eg. `getByLabelText('The label')`)
 * @param optionOrOptions The display name(s) for the option(s) to select
 */


const select = async (input, optionOrOptions) => {
  const options = Array.isArray(optionOrOptions) ? optionOrOptions : [optionOrOptions];
  const container = getReactSelectContainerFromInput(input); // Select the items we care about

  for (const option of options) {
    focus(input); // only consider accessible elements

    const optionElement = await findByText(container, option, {
      // @ts-ignore invalid rtl types :'(
      ignore: ":not([tabindex])"
    });
    fireEvent.click(optionElement);
  }
};
/**
 * Utility for creating and selecting a value in a Creatable `react-select` dropdown.
 * @async
 * @param input The input field (eg. `getByLabelText('The label')`)
 * @param option The display name for the option to type and select
 * @param createOptionText Custom label for the "create new ..." option in the menu (string or regexp)
 */

const create = async (input, option, createOptionText = /^Create "/) => {
  focus(input);
  type(input, option);
  fireEvent.change(input, {
    target: {
      value: option
    }
  });
  await select(input, createOptionText);
  await findByText(getReactSelectContainerFromInput(input), option);
};
/**
 * Utility for clearing the first value of a `react-select` dropdown.
 * @param input The input field (eg. `getByLabelText('The label')`)
 */

const clearFirst = input => {
  const container = getReactSelectContainerFromInput(input); // The "clear" button is the first svg element that is hidden to screen readers

  const clearButton = container.querySelector('svg[aria-hidden="true"]');
  fireEvent.mouseDown(clearButton);
  fireEvent.click(clearButton);
};
/**
 * Utility for clearing all values in a `react-select` dropdown.
 * @param input The input field (eg. `getByLabelText('The label')`)
 */

const clearAll = input => {
  const container = getReactSelectContainerFromInput(input); // The "clear all" button is the penultimate svg element that is hidden to screen readers
  // (the last one is the dropdown arrow)

  const elements = container.querySelectorAll('svg[aria-hidden="true"]');
  const clearAllButton = elements[elements.length - 2];
  fireEvent.mouseDown(clearAllButton);
  fireEvent.click(clearAllButton);
};
var index = {
  select,
  create,
  clearFirst,
  clearAll
};

export default index;
export { clearAll, clearFirst, create, select };
