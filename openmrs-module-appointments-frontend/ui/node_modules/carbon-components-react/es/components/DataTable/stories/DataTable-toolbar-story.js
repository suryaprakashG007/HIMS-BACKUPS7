import _extends from "@babel/runtime/helpers/extends";

/**
 * Copyright IBM Corp. 2016, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { action } from '@storybook/addon-actions';
import React from 'react';
import Button from '../../Button';
import OverflowMenu from '../../OverflowMenu';
import OverflowMenuItem from '../../OverflowMenuItem';
import { default as DataTable, TableContainer, Table, TableHead, TableRow, TableHeader, TableBody, TableCell, TableToolbar, TableToolbarAction, TableToolbarContent, TableToolbarSearch, TableToolbarMenu } from '../../DataTable';
import mdx from '../DataTable.mdx';
import { headers, rows } from './shared';
export default {
  title: 'Components/DataTable/Toolbar',
  component: DataTable,
  subcomponents: {
    TableContainer: TableContainer,
    Table: Table,
    TableHead: TableHead,
    TableRow: TableRow,
    TableHeader: TableHeader,
    TableBody: TableBody,
    TableCell: TableCell
  },
  parameters: {
    docs: {
      page: mdx
    }
  }
};
export var DefaultToolbar = function DefaultToolbar() {
  return /*#__PURE__*/React.createElement(DataTable, {
    rows: rows,
    headers: headers
  }, function (_ref) {
    var rows = _ref.rows,
        headers = _ref.headers,
        getHeaderProps = _ref.getHeaderProps,
        getRowProps = _ref.getRowProps,
        getTableProps = _ref.getTableProps,
        getToolbarProps = _ref.getToolbarProps,
        onInputChange = _ref.onInputChange,
        getTableContainerProps = _ref.getTableContainerProps;
    return /*#__PURE__*/React.createElement(TableContainer, _extends({
      title: "DataTable",
      description: "With toolbar"
    }, getTableContainerProps()), /*#__PURE__*/React.createElement(TableToolbar, _extends({}, getToolbarProps(), {
      "aria-label": "data table toolbar"
    }), /*#__PURE__*/React.createElement(TableToolbarContent, null, /*#__PURE__*/React.createElement(TableToolbarSearch, {
      onChange: onInputChange,
      onClear: action('onClear'),
      onFocus: function onFocus(event, handleExpand) {
        action('onFocus')();
        handleExpand(event, true);
      },
      onBlur: function onBlur(event, handleExpand) {
        action('onBlur')();
        var value = event.target.value;

        if (!value) {
          handleExpand(event, false);
        }
      }
    }), /*#__PURE__*/React.createElement(TableToolbarMenu, {
      light: true
    }, /*#__PURE__*/React.createElement(TableToolbarAction, {
      onClick: action('Action 1 Click')
    }, "Action 1"), /*#__PURE__*/React.createElement(TableToolbarAction, {
      onClick: action('Action 2 Click')
    }, "Action 2"), /*#__PURE__*/React.createElement(TableToolbarAction, {
      onClick: action('Action 3 Click')
    }, "Action 3")), /*#__PURE__*/React.createElement(Button, {
      onClick: action('Button click')
    }, "Primary Button"))), /*#__PURE__*/React.createElement(Table, getTableProps(), /*#__PURE__*/React.createElement(TableHead, null, /*#__PURE__*/React.createElement(TableRow, null, headers.map(function (header) {
      return /*#__PURE__*/React.createElement(TableHeader, _extends({
        key: header.key
      }, getHeaderProps({
        header: header
      })), header.header);
    }))), /*#__PURE__*/React.createElement(TableBody, null, rows.map(function (row) {
      return /*#__PURE__*/React.createElement(TableRow, _extends({
        key: row.id
      }, getRowProps({
        row: row
      })), row.cells.map(function (cell) {
        return /*#__PURE__*/React.createElement(TableCell, {
          key: cell.id
        }, cell.value);
      }));
    }))));
  });
};
export var SmallToolbar = function SmallToolbar() {
  return /*#__PURE__*/React.createElement(DataTable, {
    rows: rows,
    headers: headers
  }, function (_ref2) {
    var rows = _ref2.rows,
        headers = _ref2.headers,
        getHeaderProps = _ref2.getHeaderProps,
        getRowProps = _ref2.getRowProps,
        getTableProps = _ref2.getTableProps,
        getToolbarProps = _ref2.getToolbarProps,
        onInputChange = _ref2.onInputChange,
        getTableContainerProps = _ref2.getTableContainerProps;
    return /*#__PURE__*/React.createElement(TableContainer, _extends({
      title: "DataTable",
      description: "With toolbar"
    }, getTableContainerProps()), /*#__PURE__*/React.createElement(TableToolbar, _extends({}, getToolbarProps(), {
      "aria-label": "data table toolbar",
      size: "sm"
    }), /*#__PURE__*/React.createElement(TableToolbarContent, null, /*#__PURE__*/React.createElement(TableToolbarSearch, {
      onChange: onInputChange,
      onClear: action('onClear'),
      onFocus: function onFocus(event, handleExpand) {
        action('onFocus')();
        handleExpand(event, true);
      },
      onBlur: function onBlur(event, handleExpand) {
        action('onBlur')();
        var value = event.target.value;

        if (!value) {
          handleExpand(event, false);
        }
      }
    }), /*#__PURE__*/React.createElement(TableToolbarMenu, {
      light: true,
      size: "sm"
    }, /*#__PURE__*/React.createElement(TableToolbarAction, {
      onClick: action('Action 1 Click')
    }, "Action 1"), /*#__PURE__*/React.createElement(TableToolbarAction, {
      onClick: action('Action 2 Click')
    }, "Action 2"), /*#__PURE__*/React.createElement(TableToolbarAction, {
      onClick: action('Action 3 Click')
    }, "Action 3")), /*#__PURE__*/React.createElement(Button, {
      onClick: action('Button click')
    }, "Primary Button"))), /*#__PURE__*/React.createElement(Table, getTableProps(), /*#__PURE__*/React.createElement(TableHead, null, /*#__PURE__*/React.createElement(TableRow, null, headers.map(function (header) {
      return /*#__PURE__*/React.createElement(TableHeader, _extends({
        key: header.key
      }, getHeaderProps({
        header: header
      })), header.header);
    }))), /*#__PURE__*/React.createElement(TableBody, null, rows.map(function (row) {
      return /*#__PURE__*/React.createElement(TableRow, _extends({
        key: row.id
      }, getRowProps({
        row: row
      })), row.cells.map(function (cell) {
        return /*#__PURE__*/React.createElement(TableCell, {
          key: cell.id
        }, cell.value);
      }));
    }))));
  });
};
export var WithOverflowMenu = function WithOverflowMenu() {
  return /*#__PURE__*/React.createElement(DataTable, {
    rows: rows,
    headers: headers
  }, function (_ref3) {
    var rows = _ref3.rows,
        headers = _ref3.headers,
        getHeaderProps = _ref3.getHeaderProps,
        getRowProps = _ref3.getRowProps,
        getTableProps = _ref3.getTableProps,
        getToolbarProps = _ref3.getToolbarProps,
        onInputChange = _ref3.onInputChange;
    return /*#__PURE__*/React.createElement(TableContainer, {
      title: "DataTable",
      description: "With overflow menu"
    }, /*#__PURE__*/React.createElement(TableToolbar, _extends({}, getToolbarProps(), {
      "aria-label": "data table toolbar"
    }), /*#__PURE__*/React.createElement(TableToolbarContent, null, /*#__PURE__*/React.createElement(TableToolbarSearch, {
      onChange: onInputChange,
      onClear: action('onClear'),
      onFocus: function onFocus(event, handleExpand) {
        action('onFocus')();
        handleExpand(event, true);
      },
      onBlur: function onBlur(event, handleExpand) {
        action('onBlur')();
        var value = event.target.value;

        if (!value) {
          handleExpand(event, false);
        }
      }
    }), /*#__PURE__*/React.createElement(TableToolbarMenu, {
      light: true
    }, /*#__PURE__*/React.createElement(TableToolbarAction, {
      onClick: action('Action 1 Click')
    }, "Action 1"), /*#__PURE__*/React.createElement(TableToolbarAction, {
      onClick: action('Action 2 Click')
    }, "Action 2"), /*#__PURE__*/React.createElement(TableToolbarAction, {
      onClick: action('Action 3 Click')
    }, "Action 3")), /*#__PURE__*/React.createElement(Button, {
      onClick: action('Button click')
    }, "Primary Button"))), /*#__PURE__*/React.createElement(Table, getTableProps(), /*#__PURE__*/React.createElement(TableHead, null, /*#__PURE__*/React.createElement(TableRow, null, headers.map(function (header) {
      return /*#__PURE__*/React.createElement(TableHeader, _extends({
        key: header.key
      }, getHeaderProps({
        header: header
      })), header.header);
    }), /*#__PURE__*/React.createElement(TableHeader, null))), /*#__PURE__*/React.createElement(TableBody, null, rows.map(function (row) {
      return /*#__PURE__*/React.createElement(TableRow, _extends({
        key: row.id
      }, getRowProps({
        row: row
      })), row.cells.map(function (cell) {
        return /*#__PURE__*/React.createElement(TableCell, {
          key: cell.id
        }, cell.value);
      }), /*#__PURE__*/React.createElement(TableCell, {
        className: "bx--table-column-menu"
      }, /*#__PURE__*/React.createElement(OverflowMenu, {
        size: "sm",
        light: true,
        flipped: true
      }, /*#__PURE__*/React.createElement(OverflowMenuItem, null, "Action 1"), /*#__PURE__*/React.createElement(OverflowMenuItem, null, "Action 2"), /*#__PURE__*/React.createElement(OverflowMenuItem, null, "Action 3"))));
    }))));
  });
};