"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.translationIds = exports.NumberInput = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _iconsReact = require("@carbon/icons-react");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _FeatureFlags = require("../../FeatureFlags");

var _useMergedRefs = require("../../../internal/useMergedRefs");

var _useNormalizedInputProps = require("../../../internal/useNormalizedInputProps");

var _usePrefix = require("../../../internal/usePrefix");

var _deprecate = _interopRequireDefault(require("../../../prop-types/deprecate"));

var _excluded = ["allowEmpty", "className", "disabled", "defaultValue", "helperText", "hideLabel", "hideSteppers", "iconDescription", "id", "label", "invalid", "invalidText", "isMobile", "light", "max", "min", "onChange", "onClick", "readOnly", "size", "step", "translateWithId", "warn", "warnText", "value"];

var _defaultTranslations;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var translationIds = {
  'increment.number': 'increment.number',
  'decrement.number': 'decrement.number'
};
exports.translationIds = translationIds;
var defaultTranslations = (_defaultTranslations = {}, (0, _defineProperty2.default)(_defaultTranslations, translationIds['increment.number'], 'Increment number'), (0, _defineProperty2.default)(_defaultTranslations, translationIds['decrement.number'], 'Decrement number'), _defaultTranslations);

var NumberInput = /*#__PURE__*/_react.default.forwardRef(function NumberInput(props, forwardRef) {
  var _cx, _cx3;

  var enabled = (0, _FeatureFlags.useFeatureFlag)('enable-v11-release');
  var _props$allowEmpty = props.allowEmpty,
      allowEmpty = _props$allowEmpty === void 0 ? false : _props$allowEmpty,
      customClassName = props.className,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      defaultValue = props.defaultValue,
      _props$helperText = props.helperText,
      helperText = _props$helperText === void 0 ? '' : _props$helperText,
      _props$hideLabel = props.hideLabel,
      hideLabel = _props$hideLabel === void 0 ? false : _props$hideLabel,
      hideSteppers = props.hideSteppers,
      _props$iconDescriptio = props.iconDescription,
      iconDescription = _props$iconDescriptio === void 0 ? enabled ? undefined : 'choose a number' : _props$iconDescriptio,
      id = props.id,
      label = props.label,
      _props$invalid = props.invalid,
      invalid = _props$invalid === void 0 ? false : _props$invalid,
      _props$invalidText = props.invalidText,
      invalidText = _props$invalidText === void 0 ? enabled ? undefined : 'Provide invalidText' : _props$invalidText,
      isMobile = props.isMobile,
      _props$light = props.light,
      light = _props$light === void 0 ? false : _props$light,
      max = props.max,
      min = props.min,
      onChange = props.onChange,
      _onClick = props.onClick,
      readOnly = props.readOnly,
      _props$size = props.size,
      size = _props$size === void 0 ? 'md' : _props$size,
      _props$step = props.step,
      step = _props$step === void 0 ? 1 : _props$step,
      _props$translateWithI = props.translateWithId,
      t = _props$translateWithI === void 0 ? function (id) {
    return defaultTranslations[id];
  } : _props$translateWithI,
      _props$warn = props.warn,
      warn = _props$warn === void 0 ? false : _props$warn,
      _props$warnText = props.warnText,
      warnText = _props$warnText === void 0 ? '' : _props$warnText,
      controlledValue = props.value,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var prefix = (0, _usePrefix.usePrefix)();

  var _useState = (0, _react.useState)(function () {
    if (controlledValue !== undefined) {
      return controlledValue;
    }

    if (defaultValue !== undefined) {
      return defaultValue;
    }

    return 0;
  }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = (0, _react.useState)(controlledValue),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      prevControlledValue = _useState4[0],
      setPrevControlledValue = _useState4[1];

  var inputRef = (0, _react.useRef)(null);
  var ref = (0, _useMergedRefs.useMergedRefs)([forwardRef, inputRef]);
  var numberInputClasses = (0, _classnames.default)((_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--number"), true), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--number--helpertext"), true), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--number--readonly"), readOnly), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--number--light"), light), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--number--nolabel"), hideLabel), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--number--nosteppers"), hideSteppers), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--number--mobile"), isMobile), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--number--").concat(size), size), (0, _defineProperty2.default)(_cx, customClassName, !enabled), _cx));
  var isInputValid = getInputValidity({
    allowEmpty: allowEmpty,
    invalid: invalid,
    value: value,
    max: max,
    min: min
  });
  var normalizedProps = (0, _useNormalizedInputProps.useNormalizedInputProps)({
    id: id,
    readOnly: readOnly,
    disabled: disabled,
    invalid: !isInputValid,
    invalidText: invalidText,
    warn: warn,
    warnText: warnText
  });
  var _ref = [t('increment.number'), t('decrement.number')],
      incrementNumLabel = _ref[0],
      decrementNumLabel = _ref[1];
  var wrapperClasses = (0, _classnames.default)("".concat(prefix, "--number__input-wrapper"), (0, _defineProperty2.default)({}, "".concat(prefix, "--number__input-wrapper--warning"), normalizedProps.warn));
  var iconClasses = (0, _classnames.default)((_cx3 = {}, (0, _defineProperty2.default)(_cx3, "".concat(prefix, "--number__invalid"), normalizedProps.invalid || normalizedProps.warn), (0, _defineProperty2.default)(_cx3, "".concat(prefix, "--number__invalid--warning"), normalizedProps.warn), (0, _defineProperty2.default)(_cx3, "".concat(prefix, "--number__readonly-icon"), readOnly), _cx3));

  if (controlledValue !== prevControlledValue) {
    setValue(controlledValue);
    setPrevControlledValue(controlledValue);
  }

  var ariaDescribedBy = null;

  if (normalizedProps.invalid) {
    ariaDescribedBy = normalizedProps.invalidId;
  }

  if (normalizedProps.warn) {
    ariaDescribedBy = normalizedProps.warnId;
  }

  function handleOnChange(event) {
    if (disabled) {
      return;
    }

    var state = {
      value: event.target.value,
      direction: value < event.target.value ? 'up' : 'down'
    };
    setValue(state.value);

    if (onChange) {
      onChange(event, state);
    }
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("".concat(prefix, "--form-item"), (0, _defineProperty2.default)({}, customClassName, enabled))
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: numberInputClasses,
    "data-invalid": normalizedProps.invalid ? true : undefined
  }, /*#__PURE__*/_react.default.createElement(Label, {
    disabled: normalizedProps.disabled,
    hideLabel: hideLabel,
    id: id,
    label: label
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: wrapperClasses
  }, /*#__PURE__*/_react.default.createElement("input", (0, _extends2.default)({}, rest, {
    "data-invalid": normalizedProps.invalid ? true : undefined,
    "aria-invalid": normalizedProps.invalid,
    "aria-describedby": ariaDescribedBy,
    disabled: normalizedProps.disabled,
    ref: ref,
    id: id,
    max: max,
    min: min,
    onClick: _onClick,
    onChange: handleOnChange,
    pattern: "[0-9]*",
    readOnly: readOnly,
    step: step,
    type: "number",
    value: value
  })), normalizedProps.icon ? /*#__PURE__*/_react.default.createElement(normalizedProps.icon, {
    className: iconClasses
  }) : null, !hideSteppers && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--number__controls")
  }, /*#__PURE__*/_react.default.createElement("button", {
    "aria-label": decrementNumLabel || iconDescription,
    className: "".concat(prefix, "--number__control-btn down-icon"),
    disabled: disabled,
    onClick: function onClick(event) {
      var state = {
        value: clamp(max, min, value - step),
        direction: 'down'
      };
      setValue(state.value);

      if (onChange) {
        onChange(event, state);
      }

      if (_onClick) {
        _onClick(event, state);
      }
    },
    tabIndex: "-1",
    title: decrementNumLabel || iconDescription,
    type: "button"
  }, /*#__PURE__*/_react.default.createElement(_iconsReact.Subtract16, {
    className: "down-icon"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--number__rule-divider")
  }), /*#__PURE__*/_react.default.createElement("button", {
    "aria-label": incrementNumLabel || iconDescription,
    className: "".concat(prefix, "--number__control-btn up-icon"),
    disabled: disabled,
    onClick: function onClick(event) {
      var state = {
        value: clamp(max, min, value + step),
        direction: 'up'
      };
      setValue(state.value);

      if (onChange) {
        onChange(event, state);
      }

      if (_onClick) {
        _onClick(event, state);
      }
    },
    tabIndex: "-1",
    title: incrementNumLabel || iconDescription,
    type: "button"
  }, /*#__PURE__*/_react.default.createElement(_iconsReact.Add16, {
    className: "up-icon"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--number__rule-divider")
  }))), normalizedProps.validation ? normalizedProps.validation : /*#__PURE__*/_react.default.createElement(HelperText, {
    disabled: disabled,
    description: helperText
  })));
});

exports.NumberInput = NumberInput;
NumberInput.propTypes = {
  /**
   * `true` to allow empty string.
   */
  allowEmpty: _propTypes.default.bool,

  /**
   * Specify an optional className to be applied to the wrapper node
   */
  className: _propTypes.default.string,

  /**
   * Optional starting value for uncontrolled state
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Specify if the control should be disabled, or not
   */
  disabled: _propTypes.default.bool,

  /**
   * Provide text that is used alongside the control label for additional help
   */
  helperText: _propTypes.default.node,

  /**
   * Specify whether you want the underlying label to be visually hidden
   */
  hideLabel: _propTypes.default.bool,

  /**
   * Specify whether you want the steppers to be hidden
   */
  hideSteppers: _propTypes.default.bool,

  /**
   * Provide a description for up/down icons that can be read by screen readers
   */
  iconDescription: _propTypes.default.string,

  /**
   * Specify a custom `id` for the input
   */
  id: _propTypes.default.string.isRequired,

  /**
   * Specify if the currently value is invalid.
   */
  invalid: _propTypes.default.bool,

  /**
   * Message which is displayed if the value is invalid.
   */
  invalidText: _propTypes.default.node,

  /**
   * `true` to use the mobile variant.
   */
  isMobile: (0, _deprecate.default)(_propTypes.default.bool, "The `isMobile` prop no longer needed as the default NumberInput styles are now identical to the mobile variant styles. This prop will be removed in the next major version of `carbon-components-react`"),

  /**
   * Generic `label` that will be used as the textual representation of what
   * this field is for
   */
  label: _propTypes.default.node,

  /**
   * `true` to use the light version.
   */
  light: _propTypes.default.bool,

  /**
   * The maximum value.
   */
  max: _propTypes.default.number,

  /**
   * The minimum value.
   */
  min: _propTypes.default.number,

  /**
   * The new value is available in 'imaginaryTarget.value'
   * i.e. to get the value: evt.imaginaryTarget.value
   *
   */
  onChange: _propTypes.default.func,

  /**
   * Provide an optional function to be called when the up/down button is clicked
   */
  onClick: _propTypes.default.func,

  /**
   * Specify if the component should be read-only
   */
  readOnly: _propTypes.default.bool,

  /**
   * Specify the size of the Number Input.
   */
  size: _propTypes.default.oneOf(['sm', 'md', 'lg']),

  /**
   * Specify how much the values should increase/decrease upon clicking on up/down button
   */
  step: _propTypes.default.number,

  /**
   * Provide custom text for the component for each translation id
   */
  translateWithId: _propTypes.default.func,

  /**
   * Specify the value of the input
   */
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Specify whether the control is currently in warning state
   */
  warn: _propTypes.default.bool,

  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: _propTypes.default.node
};

function Label(_ref2) {
  var _cx5;

  var disabled = _ref2.disabled,
      id = _ref2.id,
      hideLabel = _ref2.hideLabel,
      label = _ref2.label;
  var prefix = (0, _usePrefix.usePrefix)();
  var className = (0, _classnames.default)((_cx5 = {}, (0, _defineProperty2.default)(_cx5, "".concat(prefix, "--label"), true), (0, _defineProperty2.default)(_cx5, "".concat(prefix, "--label--disabled"), disabled), (0, _defineProperty2.default)(_cx5, "".concat(prefix, "--visually-hidden"), hideLabel), _cx5));

  if (label) {
    return /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: id,
      className: className
    }, label);
  }

  return null;
}

Label.propTypes = {
  disabled: _propTypes.default.bool,
  hideLabel: _propTypes.default.bool,
  id: _propTypes.default.string,
  label: _propTypes.default.node
};

function HelperText(_ref3) {
  var disabled = _ref3.disabled,
      description = _ref3.description;
  var prefix = (0, _usePrefix.usePrefix)();
  var className = (0, _classnames.default)("".concat(prefix, "--form__helper-text"), (0, _defineProperty2.default)({}, "".concat(prefix, "--form__helper-text--disabled"), disabled));

  if (description) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: className
    }, description);
  }

  return null;
}

HelperText.propTypes = {
  description: _propTypes.default.node,
  disabled: _propTypes.default.bool
};
/**
 * Determine if the given value is invalid based on the given max, min and
 * conditions like `allowEmpty`. If `invalid` is passed through, it will default
 * to false.
 *
 * @param {object} config
 * @param {boolean} config.allowEmpty
 * @param {boolean} config.invalid
 * @param {number} config.value
 * @param {number} config.max
 * @param {number} config.min
 * @returns {boolean}
 */

function getInputValidity(_ref4) {
  var allowEmpty = _ref4.allowEmpty,
      invalid = _ref4.invalid,
      value = _ref4.value,
      max = _ref4.max,
      min = _ref4.min;

  if (invalid) {
    return false;
  }

  if (value === '') {
    return allowEmpty;
  }

  if (value > max || value < min) {
    return false;
  }

  return true;
}
/**
 * Clamp the given value between the upper bound `max` and the lower bound `min`
 * @param {number} max
 * @param {number} min
 * @param {number} value
 */


function clamp(max, min, value) {
  return Math.min(max, Math.max(min, value));
}