"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _usePrefix = require("../../internal/usePrefix");

var _excluded = ["children", "className", "href", "disabled", "inline", "visited", "renderIcon", "size"];

var Link = /*#__PURE__*/_react.default.forwardRef(function Link(_ref, ref) {
  var _cx;

  var children = _ref.children,
      customClassName = _ref.className,
      href = _ref.href,
      disabled = _ref.disabled,
      inline = _ref.inline,
      visited = _ref.visited,
      Icon = _ref.renderIcon,
      size = _ref.size,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var prefix = (0, _usePrefix.usePrefix)();
  var className = (0, _classnames.default)("".concat(prefix, "--link"), customClassName, (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--link--disabled"), disabled), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--link--inline"), inline), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--link--visited"), visited), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--link--").concat(size), size), _cx));
  var rel = rest.target === '_blank' ? 'noopener' : null;
  var linkProps = {
    className: className,
    rel: rel
  }; // Reference for disabled links:
  // https://www.scottohara.me/blog/2021/05/28/disabled-links.html

  if (!disabled) {
    linkProps.href = href;
  } else {
    linkProps.role = 'link';
    linkProps['aria-disabled'] = true;
  }

  return /*#__PURE__*/_react.default.createElement("a", (0, _extends2.default)({
    ref: ref
  }, linkProps, rest), children, !inline && Icon && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--link__icon")
  }, /*#__PURE__*/_react.default.createElement(Icon, null)));
});

Link.displayName = 'Link';
Link.propTypes = {
  /**
   * Provide the content for the Link
   */
  children: _propTypes.default.node,

  /**
   * Provide a custom className to be applied to the containing `<a>` node
   */
  className: _propTypes.default.string,

  /**
   * Specify if the control should be disabled, or not
   */
  disabled: _propTypes.default.bool,

  /**
   * Provide the `href` attribute for the `<a>` node
   */
  href: _propTypes.default.string,

  /**
   * Specify whether you want the inline version of this control
   */
  inline: _propTypes.default.bool,

  /**
   * Optional prop to render an icon next to the link.
   * Can be a React component class
   */
  renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),

  /**
   * Specify the size of the Link. Currently supports either `sm`, 'md' (default) or 'lg` as an option.
   */
  size: _propTypes.default.oneOf(['sm', 'md', 'lg']),

  /**
   * Specify whether you want the link to receive visited styles after the link has been clicked
   */
  visited: _propTypes.default.bool
};
var _default = Link;
exports.default = _default;