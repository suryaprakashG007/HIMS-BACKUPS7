"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _keyboard = require("../../internal/keyboard");

var _types = require("../../prop-types/types");

var _uniqueId = _interopRequireDefault(require("../../tools/uniqueId"));

var _usePrefix = require("../../internal/usePrefix");

var FeatureFlags = _interopRequireWildcard(require("@carbon/feature-flags"));

var _excluded = ["accept", "buttonKind", "className", "disabled", "disableLabelChanges", "id", "labelText", "multiple", "onChange", "role", "name", "size", "tabIndex"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function noop() {}

function FileUploaderButton(_ref) {
  var _cx;

  var accept = _ref.accept,
      _ref$buttonKind = _ref.buttonKind,
      buttonKind = _ref$buttonKind === void 0 ? 'primary' : _ref$buttonKind,
      className = _ref.className,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$disableLabelChan = _ref.disableLabelChanges,
      disableLabelChanges = _ref$disableLabelChan === void 0 ? false : _ref$disableLabelChan,
      id = _ref.id,
      _ref$labelText = _ref.labelText,
      ownerLabelText = _ref$labelText === void 0 ? 'Add file' : _ref$labelText,
      _ref$multiple = _ref.multiple,
      multiple = _ref$multiple === void 0 ? false : _ref$multiple,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$role = _ref.role,
      role = _ref$role === void 0 ? 'button' : _ref$role,
      name = _ref.name,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'md' : _ref$size,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,
      other = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var prefix = (0, _usePrefix.usePrefix)();

  var _useState = (0, _react.useState)(ownerLabelText),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      labelText = _useState2[0],
      setLabelText = _useState2[1];

  var _useState3 = (0, _react.useState)(ownerLabelText),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      prevOwnerLabelText = _useState4[0],
      setPrevOwnerLabelText = _useState4[1];

  var _useRef = (0, _react.useRef)(id || (0, _uniqueId.default)()),
      inputId = _useRef.current;

  var inputNode = (0, _react.useRef)(null);
  var classes = (0, _classnames.default)("".concat(prefix, "--btn"), className, (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--btn--").concat(buttonKind), buttonKind), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--btn--disabled"), disabled), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--btn--md"), size === 'field' || size === 'md'), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--btn--sm"), size === 'small' || size === 'sm'), _cx)); // Adjust label text state based on changes to the labelText prop

  if (ownerLabelText !== prevOwnerLabelText) {
    setLabelText(ownerLabelText);
    setPrevOwnerLabelText(ownerLabelText);
  }

  function onClick(event) {
    event.target.value = null;
  }

  function onKeyDown(event) {
    if ((0, _keyboard.matches)(event, [_keyboard.keys.Enter, _keyboard.keys.Space])) {
      inputNode.current.click();
    }
  }

  function handleOnChange(event) {
    var files = event.target.files;
    var length = event.target.files.length;

    if (files && !disableLabelChanges) {
      if (length > 1) {
        setLabelText("".concat(length, " files"));
      } else if (length === 1) {
        setLabelText(files[0].name);
      }
    }

    onChange(event);
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("label", (0, _extends2.default)({
    tabIndex: disabled ? -1 : tabIndex || 0,
    className: classes,
    onKeyDown: onKeyDown,
    htmlFor: inputId
  }, other), /*#__PURE__*/_react.default.createElement("span", {
    role: role,
    "aria-disabled": disabled
  }, labelText)), /*#__PURE__*/_react.default.createElement("input", {
    className: "".concat(prefix, "--visually-hidden"),
    ref: inputNode,
    id: inputId,
    disabled: disabled,
    type: "file",
    tabIndex: "-1",
    multiple: multiple,
    accept: accept,
    name: name,
    onChange: handleOnChange,
    onClick: onClick
  }));
}

FileUploaderButton.propTypes = {
  /**
   * Specify the types of files that this input should be able to receive
   */
  accept: _propTypes.default.arrayOf(_propTypes.default.string),

  /**
   * Specify the type of underlying button
   */
  buttonKind: _propTypes.default.oneOf(_types.ButtonKinds),

  /**
   * Provide a custom className to be applied to the container node
   */
  className: _propTypes.default.string,

  /**
   * Specify whether you want to disable any updates to the FileUploaderButton
   * label
   */
  disableLabelChanges: _propTypes.default.bool,

  /**
   * Specify whether file input is disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * Provide a unique id for the underlying <input> node
   */
  id: _propTypes.default.string,

  /**
   * Provide the label text to be read by screen readers when interacting with
   * this control
   */
  labelText: _propTypes.default.node,

  /**
   * Specify if the component should accept multiple files to upload
   */
  multiple: _propTypes.default.bool,

  /**
   * Provide a name for the underlying <input> node
   */
  name: _propTypes.default.string,

  /**
   * Provide an optional `onChange` hook that is called each time the <input>
   * value changes
   */
  onChange: _propTypes.default.func,

  /**
   * Provide an optional `onClick` hook that is called each time the button is
   * clicked
   */
  onClick: _propTypes.default.func,

  /**
   * Provide an accessibility role for the <FileUploaderButton>
   */
  role: _propTypes.default.string,

  /**
   * Specify the size of the FileUploaderButton, from a list of available
   * sizes.
   */
  size: FeatureFlags.enabled('enable-v11-release') ? _propTypes.default.oneOf(['sm', 'md', 'lg']) : _propTypes.default.oneOf(['default', 'field', 'small', 'sm', 'md', 'lg']),

  /**
   * Provide a custom tabIndex value for the <FileUploaderButton>
   */
  tabIndex: _propTypes.default.number
};
var _default = FileUploaderButton;
exports.default = _default;