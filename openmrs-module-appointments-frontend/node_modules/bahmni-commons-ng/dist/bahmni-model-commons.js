(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 15);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

window.Bahmni = window.Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.Models = Bahmni.Common.Models || {};

angular.module('bahmni.common.models', []);

__webpack_require__(16);
__webpack_require__(17);
__webpack_require__(18);
__webpack_require__(19);
__webpack_require__(20);

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.models').factory('age', [function () {
    var dateUtil = Bahmni.Common.Util.DateUtil;

    var fromBirthDate = function (birthDate) {
        var today = dateUtil.now();
        var period = dateUtil.diffInYearsMonthsDays(birthDate, today);
        return create(period.years, period.months, period.days);
    };

    var create = function (years, months, days) {
        var isEmpty = function () {
            return !(this.years || this.months || this.days);
        };

        return {
            years: years,
            months: months,
            days: days,
            isEmpty: isEmpty
        };
    };

    var calculateBirthDate = function (age) {
        var birthDate = dateUtil.now();
        birthDate = dateUtil.subtractYears(birthDate, age.years);
        birthDate = dateUtil.subtractMonths(birthDate, age.months);
        birthDate = dateUtil.subtractDays(birthDate, age.days);
        return birthDate;
    };

    return {
        fromBirthDate: fromBirthDate,
        create: create,
        calculateBirthDate: calculateBirthDate
    };
}]);

/***/ }),
/* 17 */
/***/ (function(module, exports) {

Bahmni.Common.AuditLogEventDetails = {
    "USER_LOGIN_SUCCESS": { eventType: "USER_LOGIN_SUCCESS", message: "USER_LOGIN_SUCCESS_MESSAGE" },
    "USER_LOGIN_FAILED": { eventType: "USER_LOGIN_FAILED", message: "USER_LOGIN_FAILED_MESSAGE" },
    "USER_LOGOUT_SUCCESS": { eventType: "USER_LOGOUT_SUCCESS", message: "USER_LOGOUT_SUCCESS_MESSAGE" },
    "OPEN_VISIT": { eventType: "OPEN_VISIT", message: "OPEN_VISIT_MESSAGE" },
    "EDIT_VISIT": { eventType: "EDIT_VISIT", message: "EDIT_VISIT_MESSAGE" },
    "CLOSE_VISIT": { eventType: "CLOSE_VISIT", message: "CLOSE_VISIT_MESSAGE" },
    "CLOSE_VISIT_FAILED": { eventType: "CLOSE_VISIT_FAILED", message: "CLOSE_VISIT_FAILED_MESSAGE" },
    "EDIT_ENCOUNTER": { eventType: "EDIT_ENCOUNTER", message: "EDIT_ENCOUNTER_MESSAGE" },

    "VIEWED_REGISTRATION_PATIENT_SEARCH": { eventType: "VIEWED_REGISTRATION_PATIENT_SEARCH", message: "VIEWED_REGISTRATION_PATIENT_SEARCH_MESSAGE" },
    "VIEWED_NEW_PATIENT_PAGE": { eventType: "VIEWED_NEW_PATIENT_PAGE", message: "VIEWED_NEW_PATIENT_PAGE_MESSAGE" },
    "REGISTER_NEW_PATIENT": { eventType: "REGISTER_NEW_PATIENT", message: "REGISTER_NEW_PATIENT_MESSAGE" },
    "EDIT_PATIENT_DETAILS": { eventType: "EDIT_PATIENT_DETAILS", message: "EDIT_PATIENT_DETAILS_MESSAGE" },
    "ACCESSED_REGISTRATION_SECOND_PAGE": { eventType: "ACCESSED_REGISTRATION_SECOND_PAGE", message: "ACCESSED_REGISTRATION_SECOND_PAGE_MESSAGE" },
    "VIEWED_PATIENT_DETAILS": { eventType: "VIEWED_PATIENT_DETAILS", message: "VIEWED_PATIENT_DETAILS_MESSAGE" },
    "PRINT_PATIENT_STICKER": { eventType: "PRINT_PATIENT_STICKER", message: "PRINT_PATIENT_STICKER_MESSAGE" },

    "VIEWED_CLINICAL_PATIENT_SEARCH": { eventType: "VIEWED_CLINICAL_PATIENT_SEARCH", message: "VIEWED_PATIENT_SEARCH_MESSAGE" },
    "VIEWED_CLINICAL_DASHBOARD": { eventType: "VIEWED_CLINICAL_DASHBOARD", message: "VIEWED_CLINICAL_DASHBOARD_MESSAGE" },
    "VIEWED_OBSERVATIONS_TAB": { eventType: "VIEWED_OBSERVATIONS_TAB", message: "VIEWED_OBSERVATIONS_TAB_MESSAGE" },
    "VIEWED_DIAGNOSIS_TAB": { eventType: "VIEWED_DIAGNOSIS_TAB", message: "VIEWED_DIAGNOSIS_TAB_MESSAGE" },
    "VIEWED_TREATMENT_TAB": { eventType: "VIEWED_TREATMENT_TAB", message: "VIEWED_TREATMENT_TAB_MESSAGE" },
    "VIEWED_DISPOSITION_TAB": { eventType: "VIEWED_DISPOSITION_TAB", message: "VIEWED_DISPOSITION_TAB_MESSAGE" },
    "VIEWED_DASHBOARD_SUMMARY": { eventType: "VIEWED_DASHBOARD_SUMMARY", message: "VIEWED_DASHBOARD_SUMMARY_MESSAGE" },
    "VIEWED_ORDERS_TAB": { eventType: "VIEWED_ORDERS_TAB", message: "VIEWED_ORDERS_TAB_MESSAGE" },
    "VIEWED_BACTERIOLOGY_TAB": { eventType: "VIEWED_BACTERIOLOGY_TAB", message: "VIEWED_BACTERIOLOGY_TAB_MESSAGE" },
    "VIEWED_INVESTIGATION_TAB": { eventType: "VIEWED_INVESTIGATION_TAB", message: "VIEWED_INVESTIGATION_TAB_MESSAGE" },
    "VIEWED_SUMMARY_PRINT": { eventType: "VIEWED_SUMMARY_PRINT", message: "VIEWED_SUMMARY_PRINT_MESSAGE" },
    "VIEWED_VISIT_DASHBOARD": { eventType: "VIEWED_VISIT_DASHBOARD", message: "VIEWED_VISIT_DASHBOARD_MESSAGE" },
    "VIEWED_VISIT_PRINT": { eventType: "VIEWED_VISIT_PRINT", message: "VIEWED_VISIT_PRINT_MESSAGE" },
    "VIEWED_DASHBOARD_OBSERVATION": { eventType: "VIEWED_DASHBOARD_OBSERVATION", message: "VIEWED_DASHBOARD_OBSERVATION_MESSAGE" },
    "VIEWED_PATIENTPROGRAM": { eventType: "VIEWED_PATIENTPROGRAM", message: "VIEWED_PATIENTPROGRAM_MESSAGE" },

    "RUN_REPORT": { eventType: "RUN_REPORT", message: "RUN_REPORT_MESSAGE" }
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Bahmni.Common.DocumentImage = function (data) {
    angular.extend(this, data);
    this.title = this.getTitle();
    this.thumbnail = this.getThumbnail();
};

Bahmni.Common.DocumentImage.prototype = {
    getTitle: function () {
        var titleComponents = [];
        if (this.concept) {
            titleComponents.push(this.concept.name);
        }
        if (this.obsDatetime) {
            titleComponents.push(moment(this.obsDatetime).format(Bahmni.Common.Constants.dateDisplayFormat));
        }
        return titleComponents.join(', ');
    },

    getThumbnail: function () {
        var src = this.src || this.encodedValue;
        return src && src.replace(/(.*)\.(.*)$/, "$1_thumbnail.$2") || null;
    }
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Bahmni.Common.VisitControl = function (visitTypes, defaultVisitTypeName, encounterService, $translate, visitService) {
    var self = this;
    self.visitTypes = visitTypes;
    self.defaultVisitTypeName = defaultVisitTypeName;
    self.defaultVisitType = visitTypes.filter(function (visitType) {
        return visitType.name === defaultVisitTypeName;
    })[0];

    self.startButtonText = function (visitType) {
        return $translate.instant('REGISTRATION_START_VISIT', { visitType: visitType.name });
    };

    self.startVisit = function (visitType) {
        self.onStartVisit();
        self.selectedVisitType = visitType;
    };

    self.createVisitOnly = function (patientUuid, visitLocationUuid) {
        var visitType = self.selectedVisitType || self.defaultVisitType;
        var visitDetails = { patient: patientUuid, visitType: visitType.uuid, location: visitLocationUuid };
        return visitService.createVisit(visitDetails);
    };
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Bahmni.Common.VisitSummary = function (visitSummary) {
    angular.extend(this, visitSummary);

    this.isAdmitted = function () {
        return this.admissionDetails && this.admissionDetails.uuid ? true : false;
    };

    this.isDischarged = function () {
        return this.dischargeDetails && this.dischargeDetails.uuid ? true : false;
    };

    this.getAdmissionEncounterUuid = function () {
        return this.isAdmitted() ? this.admissionDetails.uuid : undefined;
    };

    this.getDischargeEncounterUuid = function () {
        return this.isDischarged() ? this.dischargeDetails.uuid : undefined;
    };

    this.hasBeenAdmitted = function () {
        return this.isAdmitted() && !this.isDischarged();
    };
};

/***/ })
/******/ ]);
});