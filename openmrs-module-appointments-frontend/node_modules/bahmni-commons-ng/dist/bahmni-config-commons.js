(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 42);
/******/ })
/************************************************************************/
/******/ ({

/***/ 42:
/***/ (function(module, exports, __webpack_require__) {

angular.module('bahmni.common.config', []);

__webpack_require__(43);
__webpack_require__(44);

/***/ }),

/***/ 43:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.config').directive('showIfPrivilege', ['$rootScope', function ($rootScope) {
    return {
        scope: {
            showIfPrivilege: "@"
        },
        link: function (scope, element) {
            var privileges = scope.showIfPrivilege.split(',');
            var requiredPrivilege = false;
            if ($rootScope.currentUser) {
                var allTypesPrivileges = _.map($rootScope.currentUser.privileges, _.property('name'));
                var intersect = _.intersectionWith(allTypesPrivileges, privileges, _.isEqual);
                intersect.length > 0 ? requiredPrivilege = true : requiredPrivilege = false;
            }
            if (!requiredPrivilege) {
                element.hide();
            }
        }
    };
}]);

/***/ }),

/***/ 44:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.config').service('configurations', ['configurationService', function (configurationService) {
    this.configs = {};

    this.load = function (configNames) {
        var self = this;
        return configurationService.getConfigurations(_.difference(configNames, Object.keys(this.configs))).then(function (configurations) {
            angular.extend(self.configs, configurations);
        });
    };

    this.dosageInstructionConfig = function () {
        return this.configs.dosageInstructionConfig || [];
    };

    this.stoppedOrderReasonConfig = function () {
        return this.configs.stoppedOrderReasonConfig || [];
    };

    this.dosageFrequencyConfig = function () {
        return this.configs.dosageFrequencyConfig || [];
    };

    this.allTestsAndPanelsConcept = function () {
        return this.configs.allTestsAndPanelsConcept.results[0] || [];
    };

    this.impressionConcept = function () {
        return this.configs.radiologyImpressionConfig.results[0] || [];
    };

    this.labOrderNotesConcept = function () {
        return this.configs.labOrderNotesConfig.results[0] || [];
    };

    this.consultationNoteConcept = function () {
        return this.configs.consultationNoteConfig.results[0] || [];
    };

    this.patientConfig = function () {
        return this.configs.patientConfig || {};
    };

    this.encounterConfig = function () {
        return angular.extend(new EncounterConfig(), this.configs.encounterConfig || []);
    };

    this.patientAttributesConfig = function () {
        return this.configs.patientAttributesConfig.results;
    };

    this.identifierTypesConfig = function () {
        return this.configs.identifierTypesConfig;
    };

    this.genderMap = function () {
        return this.configs.genderMap;
    };

    this.addressLevels = function () {
        return this.configs.addressLevels;
    };

    this.relationshipTypes = function () {
        return this.configs.relationshipTypeConfig.results || [];
    };

    this.relationshipTypeMap = function () {
        return this.configs.relationshipTypeMap || {};
    };

    this.loginLocationToVisitTypeMapping = function () {
        return this.configs.loginLocationToVisitTypeMapping || {};
    };

    this.defaultEncounterType = function () {
        return this.configs.defaultEncounterType;
    };
}]);

/***/ })

/******/ });
});