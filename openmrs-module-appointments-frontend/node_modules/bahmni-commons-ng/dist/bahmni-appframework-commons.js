(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 30);
/******/ })
/************************************************************************/
/******/ ({

/***/ 30:
/***/ (function(module, exports, __webpack_require__) {

angular.module('bahmni.common.appFramework', ['authentication']);

window.Bahmni = window.Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.AppFramework = Bahmni.Common.AppFramework || {};

__webpack_require__(31);
__webpack_require__(32);
__webpack_require__(33);
__webpack_require__(34);
__webpack_require__(35);

/***/ }),

/***/ 31:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.appFramework').config(['$compileProvider', function ($compileProvider) {
    $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|chrome-extension|file):/);
}]).service('appService', ['$http', '$q', 'sessionService', '$rootScope', 'mergeService', 'loadConfigService', 'messagingService', '$translate', function ($http, $q, sessionService, $rootScope, mergeService, loadConfigService, messagingService, $translate) {
    var currentUser = null;
    var appDescriptor = null;

    var loadConfig = function (url) {
        return loadConfigService.loadConfig(url, appDescriptor.contextPath);
    };

    var loadTemplate = function (appDescriptor) {
        var deferrable = $q.defer();
        loadConfig(Bahmni.Common.Constants.baseUrl + appDescriptor.contextPath + "/appTemplate.json").then(function (result) {
            if (_.keys(result.data).length > 0) {
                appDescriptor.setTemplate(result.data);
            }
            deferrable.resolve(appDescriptor);
        }, function (error) {
            if (error.status !== 404) {
                deferrable.reject(error);
            } else {
                deferrable.resolve(appDescriptor);
            }
        });
        return deferrable.promise;
    };

    var setDefinition = function (baseResultData, customResultData) {
        if (customResultData && (_.keys(baseResultData).length > 0 || _.keys(customResultData.length > 0))) {
            appDescriptor.setDefinition(baseResultData, customResultData);
        } else if (_.keys(baseResultData).length > 0) {
            appDescriptor.setDefinition(baseResultData);
        }
    };

    var loadDefinition = function (appDescriptor) {
        var deferrable = $q.defer();
        loadConfig(Bahmni.Common.Constants.baseUrl + appDescriptor.contextPath + "/app.json").then(function (baseResult) {
            if (baseResult.data.shouldOverRideConfig) {
                loadConfig(Bahmni.Common.Constants.customUrl + appDescriptor.contextPath + "/app.json").then(function (customResult) {
                    setDefinition(baseResult.data, customResult.data);
                    deferrable.resolve(appDescriptor);
                }, function () {
                    setDefinition(baseResult.data);
                    deferrable.resolve(appDescriptor);
                });
            } else {
                setDefinition(baseResult.data);
                deferrable.resolve(appDescriptor);
            }
        }, function (error) {
            if (error.status !== 404) {
                deferrable.reject(error);
            } else {
                deferrable.resolve(appDescriptor);
            }
        });
        return deferrable.promise;
    };

    var setExtensions = function (baseResultData, customResultData) {
        if (customResultData) {
            appDescriptor.setExtensions(baseResultData, customResultData);
        } else {
            appDescriptor.setExtensions(baseResultData);
        }
    };
    var loadExtensions = function (appDescriptor, extensionFileName) {
        var deferrable = $q.defer();
        loadConfig(Bahmni.Common.Constants.baseUrl + appDescriptor.extensionPath + extensionFileName).then(function (baseResult) {
            if (baseResult.data.shouldOverRideConfig) {
                loadConfig(Bahmni.Common.Constants.customUrl + appDescriptor.extensionPath + extensionFileName).then(function (customResult) {
                    setExtensions(baseResult.data, customResult.data);
                    deferrable.resolve(appDescriptor);
                }, function () {
                    setExtensions(baseResult.data);
                    deferrable.resolve(appDescriptor);
                });
            } else {
                setExtensions(baseResult.data);
                deferrable.resolve(appDescriptor);
            }
        }, function (error) {
            if (error.status !== 404) {
                deferrable.reject(error);
            } else {
                deferrable.resolve(appDescriptor);
            }
        });
        return deferrable.promise;
    };

    var setDefaultPageConfig = function (pageName, baseResultData, customResultData) {
        if (customResultData && (_.keys(customResultData).length > 0 || _.keys(baseResultData).length > 0)) {
            appDescriptor.addConfigForPage(pageName, baseResultData, customResultData);
        } else if (_.keys(baseResultData).length > 0) {
            appDescriptor.addConfigForPage(pageName, baseResultData);
        }
    };

    var hasPrivilegeOf = function (privilegeName) {
        return _.some(currentUser.privileges, { name: privilegeName });
    };

    var loadPageConfig = function (pageName, appDescriptor) {
        var deferrable = $q.defer();
        loadConfig(Bahmni.Common.Constants.baseUrl + appDescriptor.contextPath + "/" + pageName + ".json").then(function (baseResult) {
            if (baseResult.data.shouldOverRideConfig) {
                loadConfig(Bahmni.Common.Constants.customUrl + appDescriptor.contextPath + "/" + pageName + ".json").then(function (customResult) {
                    setDefaultPageConfig(pageName, baseResult.data, customResult.data);
                    deferrable.resolve(appDescriptor);
                }, function () {
                    setDefaultPageConfig(pageName, baseResult.data);
                    deferrable.resolve(appDescriptor);
                });
            } else {
                setDefaultPageConfig(pageName, baseResult.data);
                deferrable.resolve(appDescriptor);
            }
        }, function (error) {
            if (error.status !== 404) {
                messagingService.showMessage('error', "Incorrect Configuration:  " + error.message);
                deferrable.reject(error);
            } else {
                deferrable.resolve(appDescriptor);
            }
        });
        return deferrable.promise;
    };
    this.getAppDescriptor = function () {
        return appDescriptor;
    };

    this.configBaseUrl = function () {
        return Bahmni.Common.Constants.baseUrl;
    };

    this.loadCsvFileFromConfig = function (name) {
        return loadConfig(Bahmni.Common.Constants.baseUrl + appDescriptor.contextPath + "/" + name);
    };

    this.loadConfig = function (name, shouldMerge) {
        return loadConfig(Bahmni.Common.Constants.baseUrl + appDescriptor.contextPath + "/" + name).then(function (baseResponse) {
            if (baseResponse.data.shouldOverRideConfig) {
                return loadConfig(Bahmni.Common.Constants.customUrl + appDescriptor.contextPath + "/" + name).then(function (customResponse) {
                    if (shouldMerge || shouldMerge === undefined) {
                        return mergeService.merge(baseResponse.data, customResponse.data);
                    }
                    return [baseResponse.data, customResponse.data];
                }, function () {
                    return baseResponse.data;
                });
            } else {
                return baseResponse.data;
            }
        });
    };

    this.loadMandatoryConfig = function (path) {
        return $http.get(path);
    };

    this.getAppName = function () {
        return this.appName;
    };

    this.checkPrivilege = function (privilegeName) {
        if (hasPrivilegeOf(privilegeName)) {
            return $q.when(true);
        }
        messagingService.showMessage("error", $translate.instant(Bahmni.Common.Constants.privilegeRequiredErrorMessage) + " [Privileges required: " + privilegeName + "]");
        return $q.reject();
    };

    this.initApp = function (appName, options, extensionFileSuffix, configPages) {
        this.appName = appName;
        var appLoader = $q.defer();
        var extensionFileName = extensionFileSuffix && extensionFileSuffix.toLowerCase() !== 'default' ? "/extension-" + extensionFileSuffix + ".json" : "/extension.json";
        var promises = [];
        var opts = options || { 'app': true, 'extension': true };

        var inheritAppContext = !opts.inherit ? true : opts.inherit;

        appDescriptor = new Bahmni.Common.AppFramework.AppDescriptor(appName, inheritAppContext, function () {
            return currentUser;
        }, mergeService);

        var loadCredentialsPromise = sessionService.loadCredentials();
        var loadProviderPromise = loadCredentialsPromise.then(sessionService.loadProviders);

        promises.push(loadCredentialsPromise);
        promises.push(loadProviderPromise);
        if (opts.extension) {
            promises.push(loadExtensions(appDescriptor, extensionFileName));
        }
        if (opts.template) {
            promises.push(loadTemplate(appDescriptor));
        }
        if (opts.app) {
            promises.push(loadDefinition(appDescriptor));
        }
        if (!_.isEmpty(configPages)) {
            configPages.forEach(function (configPage) {
                promises.push(loadPageConfig(configPage, appDescriptor));
            });
        }
        $q.all(promises).then(function (results) {
            currentUser = results[0];
            appLoader.resolve(appDescriptor);
            $rootScope.$broadcast('event:appExtensions-loaded');
        }, function (errors) {
            appLoader.reject(errors);
        });
        return appLoader.promise;
    };
}]);

/***/ }),

/***/ 32:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.appFramework').service('mergeService', [function () {
    this.merge = function (base, custom) {
        var mergeResult = $.extend(true, {}, base, custom);
        return deleteNullValuedKeys(mergeResult);
    };
    var deleteNullValuedKeys = function (currentObject) {
        _.forOwn(currentObject, function (value, key) {
            if (_.isUndefined(value) || _.isNull(value) || _.isNaN(value) || _.isObject(value) && _.isNull(deleteNullValuedKeys(value))) {
                delete currentObject[key];
            }
        });
        return currentObject;
    };
}]);

/***/ }),

/***/ 33:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.appFramework').directive('appExtensionList', ['appService', function (appService) {
    var appDescriptor = appService.getAppDescriptor();
    return {
        restrict: 'EA',
        template: '<ul><li ng-repeat="appExtn in appExtensions">' + '<a href="{{formatUrl(appExtn.url, extnParams)}}" class="{{appExtn.icon}}" ' + ' onclick="return false;" title="{{appExtn.label}}" ng-click="extnLinkClick(appExtn, extnParams)">' + ' <span ng-show="showLabel">{{appExtn.label}}</span>' + '</a></li></ul>',
        scope: {
            extnPointId: '@',
            showLabel: '@',
            onExtensionClick: '&',
            contextModel: '&'
        },
        compile: function (cElement, cAttrs) {
            var extnList = appDescriptor.getExtensions(cAttrs.extnPointId);
            return function (scope) {
                scope.appExtensions = extnList;
                var model = scope.contextModel();
                scope.extnParams = model || {};
            };
        },
        controller: function ($scope, $location) {
            $scope.formatUrl = appDescriptor.formatUrl;
            $scope.extnLinkClick = function (extn, params) {
                var proceedWithDefault = true;
                var clickHandler = $scope.onExtensionClick();
                var target = appDescriptor.formatUrl(extn.url, params);
                if (clickHandler) {
                    var event = {
                        'src': extn,
                        'target': target,
                        'params': params,
                        'preventDefault': function () {
                            proceedWithDefault = false;
                        }
                    };
                    clickHandler(event);
                }
                if (proceedWithDefault) {
                    $location.url(target);
                }
            };
        }
    };
}]);

/***/ }),

/***/ 34:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Bahmni.Common.AppFramework.AppDescriptor = function (context, inheritContext, retrieveUserCallback, mergeService) {
    this.id = null;
    this.instanceOf = null;
    this.description = null;
    this.contextModel = null;

    this.baseExtensionPoints = [];
    this.customExtensionPoints = [];

    this.baseExtensions = {};
    this.customExtensions = {};

    this.customConfigs = {};
    this.baseConfigs = {};

    this.extensionPath = context;
    this.contextPath = inheritContext ? context.split("/")[0] : context;

    var self = this;

    var setExtensionPointsFromExtensions = function (currentExtensions, currentExtensionPoints) {
        _.values(currentExtensions).forEach(function (extn) {
            if (extn) {
                var existing = self[currentExtensionPoints].filter(function (ep) {
                    return ep.id === extn.extensionPointId;
                });
                if (existing.length === 0) {
                    self[currentExtensionPoints].push({
                        id: extn.extensionPointId,
                        description: extn.description
                    });
                }
            }
        });
    };

    this.setExtensions = function (baseExtensions, customExtensions) {
        if (customExtensions) {
            setExtensionPointsFromExtensions(customExtensions, "customExtensionPoints");
            self.customExtensions = customExtensions;
        }
        self.baseExtensions = baseExtensions;
        setExtensionPointsFromExtensions(baseExtensions, "baseExtensionPoints");
    };

    this.setTemplate = function (template) {
        self.instanceOf = template.id;
        self.description = self.description || template.description;
        self.contextModel = self.contextModel || template.contextModel;
        if (template.configOptions) {
            _.values(template.configOptions).forEach(function (opt) {
                var existing = self.configs.filter(function (cfg) {
                    return cfg.name === opt.name;
                });
                if (existing.length > 0) {
                    existing[0].description = opt.description;
                } else {
                    self.configs.push({
                        name: opt.name,
                        description: opt.description,
                        value: opt.defaultValue
                    });
                }
            });
        }
    };

    var setConfig = function (instance, currentConfig) {
        for (var configName in instance.config) {
            var existingConfig = getConfig(self[currentConfig], configName);
            if (existingConfig) {
                existingConfig.value = instance.config[configName];
            } else {
                self[currentConfig][configName] = { name: configName, value: instance.config[configName] };
            }
        }
    };

    var setDefinitionExtensionPoints = function (extensionPoints, currentExtensionPoints) {
        if (extensionPoints) {
            extensionPoints.forEach(function (iep) {
                if (iep) {
                    var existing = self[currentExtensionPoints].filter(function (ep) {
                        return ep.id === iep.id;
                    });
                    if (existing.length === 0) {
                        self[currentExtensionPoints].push(iep);
                    }
                }
            });
        }
    };

    this.setDefinition = function (baseInstance, customInstance) {
        self.instanceOf = customInstance && customInstance.instanceOf ? customInstance.instanceOf : baseInstance.instanceOf;
        self.id = customInstance && customInstance.id ? customInstance.id : baseInstance.id;
        self.description = customInstance && customInstance.description ? customInstance.description : baseInstance.description;
        self.contextModel = customInstance && customInstance.contextModel ? customInstance.contextModel : baseInstance.contextModel;

        setDefinitionExtensionPoints(baseInstance.extensionPoints, "baseExtensionPoints");
        setConfig(baseInstance, "baseConfigs");
        if (customInstance) {
            setDefinitionExtensionPoints(customInstance.extensionPoints, "customExtensionPoints");
            setConfig(customInstance, "customConfigs");
        }
    };

    var getExtensions = function (extPointId, type, extensions) {
        var currentUser = retrieveUserCallback();
        var currentExtensions = _.values(extensions);
        if (currentUser && currentExtensions) {
            var extnType = type || 'all';
            var userPrivileges = currentUser.privileges.map(function (priv) {
                return priv.retired ? "" : priv.name;
            });
            var appsExtns = currentExtensions.filter(function (extn) {
                return (extnType === 'all' || extn.type === extnType) && extn.extensionPointId === extPointId && (!extn.requiredPrivilege || userPrivileges.indexOf(extn.requiredPrivilege) >= 0);
            });
            appsExtns.sort(function (extn1, extn2) {
                return extn1.order - extn2.order;
            });
            return appsExtns;
        }
    };

    this.getExtensions = function (extPointId, type, shouldMerge) {
        if (shouldMerge || shouldMerge === undefined) {
            var mergedExtensions = mergeService.merge(self.baseExtensions, self.customExtensions);
            return getExtensions(extPointId, type, mergedExtensions);
        }
        return [getExtensions(extPointId, type, self.baseExtensions), getExtensions(extPointId, type, self.customExtensions)];
    };

    this.getExtensionById = function (id, shouldMerge) {
        if (shouldMerge || shouldMerge === undefined) {
            var mergedExtensions = _.values(mergeService.merge(self.baseExtensions, self.customExtensions));
            return mergedExtensions.filter(function (extn) {
                return extn.id === id;
            })[0];
        } else {
            return [self.baseExtensions.filter(function (extn) {
                return extn.id === id;
            })[0], self.customExtensions.filter(function (extn) {
                return extn.id === id;
            })[0]];
        }
    };

    var getConfig = function (config, configName) {
        var cfgList = _.values(config).filter(function (cfg) {
            return cfg.name === configName;
        });
        return cfgList.length > 0 ? cfgList[0] : null;
    };

    this.getConfig = function (configName, shouldMerge) {
        if (shouldMerge || shouldMerge === undefined) {
            return getConfig(mergeService.merge(self.baseConfigs, self.customConfigs), configName);
        } else {
            return [getConfig(self.baseConfigs, configName), getConfig(self.customConfigs, configName)];
        }
    };

    this.getConfigValue = function (configName, shouldMerge) {
        var config = this.getConfig(configName, shouldMerge);

        if (shouldMerge || shouldMerge === undefined) {
            return config ? config.value : null;
        }
        return config;
    };

    this.formatUrl = function (url, options, useQueryParams) {
        var pattern = /{{([^}]*)}}/g,
            matches = url.match(pattern),
            replacedString = url,
            checkQueryParams = useQueryParams || false,
            queryParameters = this.parseQueryParams();
        if (matches) {
            matches.forEach(function (el) {
                var key = el.replace("{{", '').replace("}}", '');
                var value = options[key];
                if (!value && checkQueryParams === true) {
                    value = queryParameters[key] || null;
                }
                replacedString = replacedString.replace(el, value);
            });
        }
        return replacedString.trim();
    };

    this.parseQueryParams = function (locationSearchString) {
        var urlParams;
        var match,
            pl = /\+/g,
            // Regex for replacing addition symbol with a space
        search = /([^&=]+)=?([^&]*)/g,
            decode = function (s) {
            return decodeURIComponent(s.replace(pl, " "));
        },
            queryString = locationSearchString || window.location.search.substring(1);

        urlParams = {};
        while (match = search.exec(queryString)) {
            // eslint-disable-line no-cond-assign
            urlParams[decode(match[1])] = decode(match[2]);
        }
        return urlParams;
    };

    this.addConfigForPage = function (pageName, baseConfig, customConfig) {
        self.basePageConfigs = self.basePageConfigs || {};
        self.basePageConfigs[pageName] = baseConfig;

        self.customPageConfigs = self.customPageConfigs || {};
        self.customPageConfigs[pageName] = customConfig;
    };

    this.getConfigForPage = function (pageName, shouldMerge) {
        if (shouldMerge || shouldMerge === undefined) {
            return mergeService.merge(self.basePageConfigs[pageName], self.customPageConfigs[pageName]);
        }
        return [_.values(self.basePageConfigs[pageName]), _.values(self.customPageConfigs[pageName])];
    };
};

/***/ }),

/***/ 35:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.appFramework').service('loadConfigService', ['$http', function ($http) {
    this.loadConfig = function (url) {
        return $http.get(url, { withCredentials: true });
    };
}]);

/***/ })

/******/ });
});