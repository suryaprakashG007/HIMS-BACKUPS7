(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 77);
/******/ })
/************************************************************************/
/******/ ({

/***/ 77:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


window.Bahmni = window.Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.I18n = Bahmni.Common.I18n || {};

angular.module('bahmni.common.i18n', []);

__webpack_require__(78);
__webpack_require__(79);

/***/ }),

/***/ 78:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.i18n', ['pascalprecht.translate']).provider('$bahmniTranslate', ['$translateProvider', function ($translateProvider) {
    this.init = function (options) {
        var preferredLanguage = window.localStorage["NG_TRANSLATE_LANG_KEY"] || "en";
        $translateProvider.useLoader('mergeLocaleFilesService', options);
        $translateProvider.useSanitizeValueStrategy('escaped');
        $translateProvider.preferredLanguage(preferredLanguage);
        $translateProvider.useLocalStorage();
    };
    this.$get = [function () {
        return $translateProvider;
    }];
}]).filter('titleTranslate', ['$translate', function ($translate) {
    return function (input) {
        if (!input) {
            return input;
        }
        if (input.translationKey) {
            return $translate.instant(input.translationKey);
        }
        if (input.dashboardName) {
            return input.dashboardName;
        }
        if (input.title) {
            return input.title;
        }
        if (input.label) {
            return input.label;
        }
        if (input.display) {
            return input.display;
        }
        return $translate.instant(input);
    };
}]);

/***/ }),

/***/ 79:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.i18n').service('mergeLocaleFilesService', ['$http', '$q', 'mergeService', function ($http, $q, mergeService) {
    return function (options) {
        var baseLocaleUrl = Bahmni.Common.Constants.baseLocaleURL;
        var customLocaleUrl = Bahmni.Common.Constants.customLocaleURL;

        var loadFile = function (url) {
            return $http.get(url, { withCredentials: true });
        };

        var mergeLocaleFile = function (options) {
            var fileURL = options.app + "/locale_" + options.key + ".json";

            var loadBahmniTranslations = function () {
                return loadFile(baseLocaleUrl + fileURL).then(function (result) {
                    return result;
                }, function () {
                    return;
                });
            };
            var loadCustomTranslations = function () {
                return loadFile(customLocaleUrl + fileURL).then(function (result) {
                    return result;
                }, function () {
                    return;
                });
            };

            var mergeTranslations = function (result) {
                var baseFileData = result[0] ? result[0].data : undefined;
                var customFileData = result[1] ? result[1].data : undefined;
                if (options.shouldMerge || options.shouldMerge === undefined) {
                    return mergeService.merge(baseFileData, customFileData);
                }
                return [baseFileData, customFileData];
            };

            return $q.all([loadBahmniTranslations(), loadCustomTranslations()]).then(mergeTranslations);
        };
        return mergeLocaleFile(options);
    };
}]);

/***/ })

/******/ });
});