(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 26);
/******/ })
/************************************************************************/
/******/ ({

/***/ 26:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


window.Bahmni = window.Bahmni || {};
Bahmni.Common = Bahmni.Common || {};
Bahmni.Common.Domain = Bahmni.Common.Domain || {};
Bahmni.Common.Domain.Helper = Bahmni.Common.Domain.Helper || {};

angular.module('bahmni.common.domain', []);

__webpack_require__(27);
__webpack_require__(28);
__webpack_require__(29);

/***/ }),

/***/ 27:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.domain').factory('configurationService', ['$http', '$q', function ($http, $q) {
    var configurationFunctions = {};

    configurationFunctions.encounterConfig = function () {
        return $http.get(Bahmni.Common.Constants.encounterConfigurationUrl, {
            params: { "callerContext": "REGISTRATION_CONCEPTS" },
            withCredentials: true
        });
    };

    configurationFunctions.patientConfig = function () {
        var patientConfig = $http.get(Bahmni.Common.Constants.patientConfigurationUrl, {
            withCredentials: true
        });
        return patientConfig;
    };

    configurationFunctions.patientAttributesConfig = function () {
        return $http.get(Bahmni.Common.Constants.personAttributeTypeUrl, {
            params: { v: 'custom:(uuid,name,sortWeight,description,format,concept)' },
            withCredentials: true
        });
    };

    configurationFunctions.dosageFrequencyConfig = function () {
        var dosageFrequencyConfig = $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl, {
            method: "GET",
            params: { v: 'custom:(uuid,name,answers)', name: Bahmni.Common.Constants.dosageFrequencyConceptName },
            withCredentials: true
        });
        return dosageFrequencyConfig;
    };

    configurationFunctions.dosageInstructionConfig = function () {
        var dosageInstructionConfig = $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl, {
            method: "GET",
            params: { v: 'custom:(uuid,name,answers)', name: Bahmni.Common.Constants.dosageInstructionConceptName },
            withCredentials: true
        });
        return dosageInstructionConfig;
    };

    configurationFunctions.stoppedOrderReasonConfig = function () {
        var stoppedOrderReasonConfig = $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl, {
            method: "GET",
            params: { v: 'custom:(uuid,name,answers)', name: Bahmni.Common.Constants.stoppedOrderReasonConceptName },
            withCredentials: true
        });
        return stoppedOrderReasonConfig;
    };

    configurationFunctions.consultationNoteConfig = function () {
        var consultationNoteConfig = $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl, {
            method: "GET",
            params: { v: 'custom:(uuid,name,answers)', name: Bahmni.Common.Constants.consultationNoteConceptName },
            withCredentials: true
        });
        return consultationNoteConfig;
    };

    configurationFunctions.radiologyObservationConfig = function () {
        var radiologyObservationConfig = $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl, {
            method: "GET",
            params: { v: 'custom:(uuid,name)', name: Bahmni.Common.Constants.radiologyResultConceptName },
            withCredentials: true
        });
        return radiologyObservationConfig;
    };

    configurationFunctions.labOrderNotesConfig = function () {
        var labOrderNotesConfig = $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl, {
            method: "GET",
            params: { v: 'custom:(uuid,name)', name: Bahmni.Common.Constants.labOrderNotesConcept },
            withCredentials: true
        });
        return labOrderNotesConfig;
    };

    configurationFunctions.defaultEncounterType = function () {
        return $http.get(Bahmni.Common.Constants.globalPropertyUrl, {
            params: {
                property: 'bahmni.encounterType.default'
            },
            withCredentials: true,
            transformResponse: [function (data) {
                return data;
            }]
        });
    };

    configurationFunctions.radiologyImpressionConfig = function () {
        var radiologyImpressionConfig = $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl, {
            method: "GET",
            params: { v: 'custom:(uuid,name)', name: Bahmni.Common.Constants.impressionConcept },
            withCredentials: true
        });
        return radiologyImpressionConfig;
    };

    configurationFunctions.addressLevels = function () {
        return $http.get(Bahmni.Common.Constants.openmrsUrl + "/module/addresshierarchy/ajax/getOrderedAddressHierarchyLevels.form", {
            withCredentials: true
        });
    };

    configurationFunctions.allTestsAndPanelsConcept = function () {
        var allTestsAndPanelsConcept = $http.get(Bahmni.Common.Constants.conceptSearchByFullNameUrl, {
            method: "GET",
            params: {
                v: 'custom:(uuid,name:(uuid,name),setMembers:(uuid,name:(uuid,name)))',
                name: Bahmni.Common.Constants.allTestsAndPanelsConceptName
            },
            withCredentials: true
        });
        return allTestsAndPanelsConcept;
    };

    configurationFunctions.identifierTypesConfig = function () {
        return $http.get(Bahmni.Common.Constants.idgenConfigurationURL, {
            withCredentials: true
        });
    };

    configurationFunctions.genderMap = function () {
        return $http.get(Bahmni.Common.Constants.globalPropertyUrl, {
            method: "GET",
            params: {
                property: 'mrs.genders'
            },
            withCredentials: true
        });
    };

    configurationFunctions.relationshipTypeMap = function () {
        return $http.get(Bahmni.Common.Constants.globalPropertyUrl, {
            method: "GET",
            params: {
                property: 'bahmni.relationshipTypeMap'
            },
            withCredentials: true
        });
    };

    configurationFunctions.relationshipTypeConfig = function () {
        return $http.get(Bahmni.Common.Constants.relationshipTypesUrl, {
            withCredentials: true,
            params: { v: "custom:(aIsToB,bIsToA,uuid)" }
        });
    };

    configurationFunctions.loginLocationToVisitTypeMapping = function () {
        var url = Bahmni.Common.Constants.entityMappingUrl;
        return $http.get(url, {
            params: {
                mappingType: 'loginlocation_visittype',
                s: 'byEntityAndMappingType'
            }
        });
    };

    configurationFunctions.enableAuditLog = function () {
        return $http.get(Bahmni.Common.Constants.globalPropertyUrl, {
            method: "GET",
            params: {
                property: 'bahmni.enableAuditLog'
            },
            withCredentials: true
        });
    };

    var existingPromises = {};
    var configurations = {};

    var getConfigurations = function (configurationNames) {
        var configurationsPromiseDefer = $q.defer();
        var promises = [];

        configurationNames.forEach(function (configurationName) {
            if (!existingPromises[configurationName]) {
                existingPromises[configurationName] = configurationFunctions[configurationName]().then(function (response) {
                    configurations[configurationName] = response.data;
                });
                promises.push(existingPromises[configurationName]);
            }
        });

        $q.all(promises).then(function () {
            configurationsPromiseDefer.resolve(configurations);
        });

        return configurationsPromiseDefer.promise;
    };

    return {
        getConfigurations: getConfigurations
    };
}]);

/***/ }),

/***/ 28:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.domain').factory('locationService', ['$http', '$bahmniCookieStore', function ($http, $bahmniCookieStore) {
    var getAllByTag = function (tags, operator) {
        return $http.get(Bahmni.Common.Constants.locationUrl, {
            params: { s: "byTags", tags: tags || "", v: "default", operator: operator || "ALL" },
            cache: true
        });
    };

    var getByUuid = function (locationUuid) {
        return $http.get(Bahmni.Common.Constants.locationUrl + "/" + locationUuid, {
            cache: true
        }).then(function (response) {
            return response.data;
        });
    };

    var getLoggedInLocation = function () {
        var cookie = $bahmniCookieStore.get(Bahmni.Common.Constants.locationCookieName);
        return getByUuid(cookie.uuid);
    };

    var getVisitLocation = function (locationUuid) {
        return $http.get(Bahmni.Common.Constants.bahmniVisitLocationUrl + "/" + locationUuid, {
            headers: { "Accept": "application/json" }
        });
    };

    return {
        getAllByTag: getAllByTag,
        getLoggedInLocation: getLoggedInLocation,
        getByUuid: getByUuid,
        getVisitLocation: getVisitLocation
    };
}]);

/***/ }),

/***/ 29:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('bahmni.common.domain').factory('providerService', ['$http', function ($http) {
    var search = function (fieldValue) {
        return $http.get(Bahmni.Common.Constants.providerUrl, {
            method: "GET",
            params: { q: fieldValue, v: "full" },
            withCredentials: true
        });
    };

    var searchByUuid = function (uuid) {
        return $http.get(Bahmni.Common.Constants.providerUrl, {
            method: "GET",
            params: {
                user: uuid
            },
            cache: false
        });
    };

    var list = function (params) {
        return $http.get(Bahmni.Common.Constants.providerUrl, {
            method: "GET",
            cache: false,
            params: params
        });
    };

    return {
        search: search,
        searchByUuid: searchByUuid,
        list: list
    };
}]);

/***/ })

/******/ });
});