/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { useEffect, useRef } from 'react';
export function useEvent(elementOrRef, eventName, callback) {
  var savedCallback = useRef(null);
  useEffect(function () {
    savedCallback.current = callback;
  });
  useEffect(function () {
    var _elementOrRef$current;

    function handler(event) {
      if (savedCallback.current) {
        savedCallback.current(event);
      }
    }

    var element = (_elementOrRef$current = elementOrRef.current) !== null && _elementOrRef$current !== void 0 ? _elementOrRef$current : elementOrRef;
    element.addEventListener(eventName, handler);
    return function () {
      element.removeEventListener(eventName, handler);
    };
  }, [elementOrRef, eventName]);
}
export function useWindowEvent(eventName, callback) {
  var savedCallback = useRef(null);
  useEffect(function () {
    savedCallback.current = callback;
  });
  useEffect(function () {
    function handler(event) {
      if (savedCallback.current) {
        savedCallback.current(event);
      }
    }

    window.addEventListener(eventName, handler);
    return function () {
      window.removeEventListener(eventName, handler);
    };
  }, [eventName]);
}