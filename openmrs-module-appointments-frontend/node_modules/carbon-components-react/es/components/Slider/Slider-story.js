import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { useState } from 'react';
import { action } from '@storybook/addon-actions';
import { withKnobs, boolean, number, text } from '@storybook/addon-knobs';
import Slider from '../Slider';
import SliderSkeleton from '../Slider/Slider.Skeleton';
import { sliderValuePropSync } from '../../internal/FeatureFlags';
import mdx from './Slider.mdx';

var props = function props() {
  return {
    name: text('Form item name (name)', ''),
    inputType: text('The form element type (inputType)', 'number'),
    ariaLabelInput: text('The ARIA label for the <input> (ariaLabelInput)', 'Label for slider value'),
    disabled: boolean('Disabled (disabled)', false),
    light: boolean('Light variant (light)', false),
    hideTextInput: boolean('Without text input (hideTextInput)', false),
    value: !sliderValuePropSync ? 50 : number('The value (value)', 50),
    min: number('The minimum value (min)', 0),
    max: number('The maximum value (max)', 100),
    step: number('The step (step)', 1),
    stepMultiplier: number('The step factor for Shift+arrow keys (stepMultiplier)', 5),
    labelText: text('Label text (labelText)', 'Slider Label'),
    minLabel: text('Label for minimum value (minLabel)', ''),
    maxLabel: text('Label for maximum value (maxLabel)', ''),
    onChange: action('onChange'),
    onRelease: action('onRelease')
  };
};

export default {
  title: 'Components/Slider',
  component: Slider,
  decorators: [withKnobs],
  subcomponents: {
    SliderSkeleton: SliderSkeleton
  },
  parameters: {
    docs: {
      page: mdx
    }
  }
};
export var Default = function Default() {
  return /*#__PURE__*/React.createElement(Slider, {
    labelText: "Slider Label",
    value: 50,
    min: 30,
    max: 100,
    step: 1,
    stepMultiplier: 10,
    novalidate: true
  });
};
Default.story = {
  name: 'Slider'
};
export var Playground = function Playground() {
  return /*#__PURE__*/React.createElement(Slider, _extends({
    id: "slider"
  }, props()));
};
export var ControlledSlider = function ControlledSlider() {
  var _useState = useState(87),
      _useState2 = _slicedToArray(_useState, 2),
      val = _useState2[0],
      setVal = _useState2[1];

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: function onClick() {
      return setVal(Math.round(Math.random() * 100));
    }
  }, "randomize value"), /*#__PURE__*/React.createElement(Slider, {
    max: 100,
    min: 0,
    value: val,
    onChange: function onChange(_ref) {
      var value = _ref.value;
      return setVal(value);
    }
  }), /*#__PURE__*/React.createElement("h1", null, val));
};
export var Skeleton = function Skeleton() {
  return /*#__PURE__*/React.createElement(SliderSkeleton, null);
};