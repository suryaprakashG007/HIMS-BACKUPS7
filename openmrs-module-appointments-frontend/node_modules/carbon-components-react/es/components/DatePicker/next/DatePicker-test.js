/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import DatePicker from './DatePicker';
import { mount } from 'enzyme';
import DatePickerInput from '../../DatePickerInput/next/DatePickerInput';
var prefix = 'bx';

function getFlatpickrCalendar() {
  return document.querySelector(".".concat(prefix, "--date-picker__calendar"));
}

describe('DatePicker', function () {
  describe('Renders as expected', function () {
    var wrapper;
    var datepicker;
    beforeEach(function () {
      wrapper = mount( /*#__PURE__*/React.createElement(DatePicker, {
        onChange: function onChange() {},
        className: "extra-class",
        dateFormat: "m/d/Y"
      }, /*#__PURE__*/React.createElement(DatePickerInput, {
        id: "date-picker-input-id-start",
        placeholder: "mm/dd/yyyy",
        labelText: "Start date"
      }), /*#__PURE__*/React.createElement(DatePickerInput, {
        id: "date-picker-input-id-finish",
        placeholder: "mm/dd/yyyy",
        labelText: "End date"
      })));
      datepicker = wrapper.childAt(0);
    });
    it('should add extra classes that are passed via className', function () {
      expect(datepicker.hasClass('extra-class')).toBe(true);
    });
    it('should add the date picker type as expected', function () {
      expect(wrapper.props().datePickerType).toEqual(undefined);
      wrapper.setProps({
        datePickerType: 'simple'
      });
      expect(wrapper.props().datePickerType).toEqual('simple');
    });
    it('should add the date format as expected', function () {
      expect(wrapper.props().dateFormat).toEqual('m/d/Y');
      wrapper.setProps({
        dateFormat: 'd/m/Y'
      });
      expect(wrapper.props().dateFormat).toEqual('d/m/Y');
    });
    it('has the value as expected', function () {
      expect(wrapper.props().value).toEqual(undefined);
      wrapper.setProps({
        value: '11/08/2017'
      });
      expect(wrapper.props().value).toEqual('11/08/2017');
    });
    it('should render the children as expected', function () {
      expect(wrapper.props().children.length).toEqual(2);
    });
  });
  describe('Simple date picker', function () {
    var wrapper;
    beforeEach(function () {
      wrapper = mount( /*#__PURE__*/React.createElement(DatePicker, {
        datePickerType: "simple",
        className: "extra-class"
      }, /*#__PURE__*/React.createElement(DatePickerInput, {
        placeholder: "mm/dd/yyyy",
        labelText: "Date Picker label",
        id: "date-picker-single"
      })));
    });
    it('has the value as expected', function () {
      expect(wrapper.props().value).toEqual(undefined);
      wrapper.setProps({
        value: '11/08/2017'
      });
      expect(wrapper.props().value).toEqual('11/08/2017');
    });
    it('should not initialize a calendar', function () {
      expect(getFlatpickrCalendar()).not.toBeInTheDocument();
    });
  });
  describe('Single date picker', function () {
    var wrapper;
    beforeEach(function () {
      wrapper = mount( /*#__PURE__*/React.createElement(DatePicker, {
        onChange: function onChange() {},
        datePickerType: "single",
        className: "extra-class"
      }, /*#__PURE__*/React.createElement(DatePickerInput, {
        placeholder: "mm/dd/yyyy",
        labelText: "Date Picker label",
        id: "date-picker-single"
      })));
    });
    it('should initialize a calendar', function () {
      expect(getFlatpickrCalendar()).toBeInTheDocument();
    });
    it('should update the classnames', function () {
      expect(getFlatpickrCalendar().classList.contains("".concat(prefix, "--date-picker__calendar"))).toBe(true);
    });
    it('has the value as expected', function () {
      expect(wrapper.props().value).toEqual(undefined);
      wrapper.setProps({
        value: '11/08/2017'
      });
      expect(wrapper.props().value).toEqual('11/08/2017');
    });
  });
  describe('Date picker with locale', function () {
    var wrapper;
    var wrapperNoLocale;
    beforeEach(function () {
      wrapper = mount( /*#__PURE__*/React.createElement(DatePicker, {
        onChange: function onChange() {},
        datePickerType: "range",
        className: "extra-class",
        locale: "es"
      }, /*#__PURE__*/React.createElement(DatePickerInput, {
        id: "date-picker-input-id-start",
        placeholder: "mm/dd/yyyy",
        labelText: "Start date"
      }), /*#__PURE__*/React.createElement(DatePickerInput, {
        id: "date-picker-input-id-finish",
        placeholder: "mm/dd/yyyy",
        labelText: "End date"
      })));
      wrapperNoLocale = mount( /*#__PURE__*/React.createElement(DatePicker, {
        onChange: function onChange() {},
        datePickerType: "range",
        className: "extra-class"
      }, /*#__PURE__*/React.createElement(DatePickerInput, {
        id: "date-picker-input-id-start",
        placeholder: "mm/dd/yyyy",
        labelText: "Start date"
      }), /*#__PURE__*/React.createElement(DatePickerInput, {
        id: "date-picker-input-id-finish",
        placeholder: "mm/dd/yyyy",
        labelText: "End date"
      })));
    });
    it('has the range date picker locale', function () {
      var datepicker = wrapper.find('DatePicker');
      expect(datepicker.props().locale).toBe('es');
    });
    it('has the range date picker without locale defined', function () {
      var datepicker = wrapperNoLocale.find('DatePicker');
      expect(datepicker.props().locale).toBe(undefined);
    });
  });
  describe('Date picker with minDate and maxDate', function () {
    var mockConsoleError;
    var wrapper;
    beforeEach(function () {
      mockConsoleError = jest.spyOn(console, 'error');
      wrapper = mount( /*#__PURE__*/React.createElement(DatePicker, {
        onChange: function onChange() {},
        datePickerType: "range",
        className: "extra-class",
        minDate: "01/01/2018",
        maxDate: "01/30/2018"
      }, /*#__PURE__*/React.createElement(DatePickerInput, {
        id: "date-picker-input-id-start",
        placeholder: "mm/dd/yyyy",
        labelText: "Start date"
      }), /*#__PURE__*/React.createElement(DatePickerInput, {
        id: "date-picker-input-id-finish",
        placeholder: "mm/dd/yyyy",
        labelText: "End date"
      })));
    });
    afterEach(function () {
      mockConsoleError.mockRestore();
    });
    it('has the range date picker with min and max dates', function () {
      var datepicker = wrapper.find('DatePicker');
      expect(datepicker.props().minDate).toBe('01/01/2018');
      expect(datepicker.props().maxDate).toBe('01/30/2018');
    });
    it('should not have "console.error" being created', function () {
      expect(mockConsoleError).not.toHaveBeenCalled();
    });
  });
});