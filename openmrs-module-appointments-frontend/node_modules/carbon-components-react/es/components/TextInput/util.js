import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var invalidProps = function invalidProps(invalidId) {
  return {
    'data-invalid': true,
    'aria-invalid': true,
    'aria-describedby': invalidId
  };
};

var warnProps = function warnProps(warnId) {
  return {
    'aria-describedby': warnId
  };
};

export var textInputProps = function textInputProps(_ref) {
  var sharedTextInputProps = _ref.sharedTextInputProps,
      invalid = _ref.invalid,
      invalidId = _ref.invalidId,
      warn = _ref.warn,
      warnId = _ref.warnId;
  return _objectSpread(_objectSpread(_objectSpread({}, sharedTextInputProps), invalid ? invalidProps(invalidId) : {}), warn ? warnProps(warnId) : {});
};