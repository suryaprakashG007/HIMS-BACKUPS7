import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["datePickerType", "disabled", "helperText", "hideLabel", "id", "invalid", "invalidText", "labelText", "onClick", "onChange", "pattern", "placeholder", "size", "type", "warn", "warnText"],
    _excluded2 = ["openCalendar", "iconDescription"],
    _excluded3 = ["datePickerType", "invalid", "warn"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Calendar16, WarningFilled16, WarningAltFilled16 } from '@carbon/icons-react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { usePrefix } from '../../../internal/usePrefix';
import deprecate from '../../../prop-types/deprecate';
var DatePickerInput = /*#__PURE__*/React.forwardRef(function DatePickerInput(props, ref) {
  var _cx, _cx2, _cx4;

  var datePickerType = props.datePickerType,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      helperText = props.helperText,
      hideLabel = props.hideLabel,
      id = props.id,
      _props$invalid = props.invalid,
      invalid = _props$invalid === void 0 ? false : _props$invalid,
      invalidText = props.invalidText,
      labelText = props.labelText,
      _props$onClick = props.onClick,
      _onClick = _props$onClick === void 0 ? function () {} : _props$onClick,
      _props$onChange = props.onChange,
      _onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      _props$pattern = props.pattern,
      pattern = _props$pattern === void 0 ? '\\d{1,2}\\/\\d{1,2}\\/\\d{4}' : _props$pattern,
      placeholder = props.placeholder,
      _props$size = props.size,
      size = _props$size === void 0 ? 'md' : _props$size,
      _props$type = props.type,
      type = _props$type === void 0 ? 'text' : _props$type,
      warn = props.warn,
      warnText = props.warnText,
      rest = _objectWithoutProperties(props, _excluded);

  var prefix = usePrefix();
  var datePickerInputProps = {
    id: id,
    onChange: function onChange(event) {
      if (!disabled) {
        _onChange(event);
      }
    },
    onClick: function onClick(event) {
      if (!disabled) {
        _onClick(event);
      }
    },
    pattern: pattern,
    placeholder: placeholder,
    type: type
  };
  var wrapperClasses = cx("".concat(prefix, "--date-picker-input__wrapper"), (_cx = {}, _defineProperty(_cx, "".concat(prefix, "--date-picker-input__wrapper--invalid"), invalid), _defineProperty(_cx, "".concat(prefix, "--date-picker-input__wrapper--warn"), warn), _cx));
  var labelClasses = cx("".concat(prefix, "--label"), (_cx2 = {}, _defineProperty(_cx2, "".concat(prefix, "--visually-hidden"), hideLabel), _defineProperty(_cx2, "".concat(prefix, "--label--disabled"), disabled), _cx2));
  var helperTextClasses = cx("".concat(prefix, "--form__helper-text"), _defineProperty({}, "".concat(prefix, "--form__helper-text--disabled"), disabled));
  var inputClasses = cx("".concat(prefix, "--date-picker__input"), (_cx4 = {}, _defineProperty(_cx4, "".concat(prefix, "--date-picker__input--").concat(size), size), _defineProperty(_cx4, "".concat(prefix, "--date-picker__input--invalid"), invalid), _cx4));
  var containerClasses = cx("".concat(prefix, "--date-picker-container"), _defineProperty({}, "".concat(prefix, "--date-picker--nolabel"), !labelText));

  var _rest = _objectSpread({}, rest),
      openCalendar = _rest.openCalendar,
      iconDescription = _rest.iconDescription,
      other = _objectWithoutProperties(_rest, _excluded2);

  var input = invalid ? /*#__PURE__*/React.createElement("input", _extends({}, other, datePickerInputProps, {
    disabled: disabled,
    ref: ref,
    "data-invalid": true,
    className: inputClasses
  })) : /*#__PURE__*/React.createElement("input", _extends({}, other, datePickerInputProps, {
    disabled: disabled,
    className: inputClasses,
    ref: ref
  }));
  return /*#__PURE__*/React.createElement("div", {
    className: containerClasses
  }, labelText && /*#__PURE__*/React.createElement("label", {
    htmlFor: id,
    className: labelClasses
  }, labelText), /*#__PURE__*/React.createElement("div", {
    className: wrapperClasses
  }, input, /*#__PURE__*/React.createElement(DatePickerIcon, {
    datePickerType: datePickerType,
    iconDescription: iconDescription,
    invalid: invalid,
    openCalendar: openCalendar,
    warn: warn
  })), invalid && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefix, "--form-requirement")
  }, invalidText), warn && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefix, "--form-requirement")
  }, warnText), helperText && /*#__PURE__*/React.createElement("div", {
    className: helperTextClasses
  }, helperText));
});
DatePickerInput.propTypes = {
  /**
   * The type of the date picker:
   *
   * * `simple` - Without calendar dropdown.
   * * `single` - With calendar dropdown and single date.
   * * `range` - With calendar dropdown and a date range.
   */
  datePickerType: PropTypes.oneOf(['simple', 'single', 'range']),

  /**
   * Specify whether or not the input should be disabled
   */
  disabled: PropTypes.bool,

  /**
   * Provide text that is used alongside the control label for additional help
   */
  helperText: PropTypes.node,

  /**
   * Specify if the label should be hidden
   */
  hideLabel: PropTypes.bool,

  /**
   * The description of the calendar icon.
   */
  iconDescription: deprecate(PropTypes.string, "\nThe prop `iconDescriptionInput` for DatePickerInput has been deprecated and is no longer used"),

  /**
   * Specify an id that uniquely identifies the `<input>`
   */
  id: PropTypes.string.isRequired,

  /**
   * Specify whether or not the input should be invalid
   */
  invalid: PropTypes.bool,

  /**
   * Specify the text to be rendered when the input is invalid
   */
  invalidText: PropTypes.node,

  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control
   */
  labelText: PropTypes.node.isRequired,

  /**
   * Specify an `onChange` handler that is called whenever a change in the
   * input field has occurred
   */
  onChange: PropTypes.func,

  /**
   * Provide a function to be called when the input field is clicked
   */
  onClick: PropTypes.func,

  /**
   * Provide a function to be called when the input field is clicked
   */
  openCalendar: deprecate(PropTypes.func, "\nThe prop `openCalendar` for DatePickerInput has been deprecated and is no longer used"),

  /**
   * Provide a regular expression that the input value must match
   */
  pattern: function pattern(props, propName, componentName) {
    if (props[propName] === undefined) {
      return;
    }

    try {
      new RegExp(props[propName]);
    } catch (e) {
      return new Error("Invalid value of prop '".concat(propName, "' supplied to '").concat(componentName, "', it should be a valid regular expression"));
    }
  },

  /**
   * Specify the placeholder text
   */
  placeholder: PropTypes.string,

  /**
   * Specify the size of the Date Picker Input. Currently supports either `sm`, `md`, or `lg` as an option.
   */
  size: PropTypes.oneOf(['sm', 'md', 'lg']),

  /**
   * Specify the type of the `<input>`
   */
  type: PropTypes.string,

  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes.bool,

  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes.node
};

function DatePickerIcon(_ref) {
  var datePickerType = _ref.datePickerType,
      invalid = _ref.invalid,
      warn = _ref.warn,
      rest = _objectWithoutProperties(_ref, _excluded3);

  var prefix = usePrefix();

  if (datePickerType === 'simple' && !invalid && !warn) {
    return null;
  }

  if (invalid) {
    return /*#__PURE__*/React.createElement(WarningFilled16, {
      className: "".concat(prefix, "--date-picker__icon ").concat(prefix, "--date-picker__icon--invalid")
    });
  }

  if (!invalid && warn) {
    return /*#__PURE__*/React.createElement(WarningAltFilled16, {
      className: "".concat(prefix, "--date-picker__icon ").concat(prefix, "--date-picker__icon--warn")
    });
  }

  return /*#__PURE__*/React.createElement(Calendar16, {
    className: "".concat(prefix, "--date-picker__icon"),
    "aria-label": rest.iconDescription,
    onClick: rest.openCalendar,
    role: "img",
    "aria-hidden": "true"
  }, rest.iconDescription && /*#__PURE__*/React.createElement("title", null, rest.iconDescription));
}

DatePickerIcon.propTypes = {
  /**
   * The type of the date picker:
   *
   * * `simple` - Without calendar dropdown.
   * * `single` - With calendar dropdown and single date.
   * * `range` - With calendar dropdown and a date range.
   */
  datePickerType: PropTypes.oneOf(['simple', 'single', 'range']),

  /**
   * Specify whether or not the input should be invalid
   */
  invalid: PropTypes.bool,

  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes.bool
};
export default DatePickerInput;