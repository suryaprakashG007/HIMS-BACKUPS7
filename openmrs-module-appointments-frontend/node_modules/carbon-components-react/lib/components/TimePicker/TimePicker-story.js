"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _addonKnobs = require("@storybook/addon-knobs");

var _TimePicker = _interopRequireDefault(require("../TimePicker"));

var _TimePickerSelect = _interopRequireDefault(require("../TimePickerSelect"));

var _SelectItem = _interopRequireDefault(require("../SelectItem"));

var _TimePicker2 = _interopRequireDefault(require("./TimePicker.mdx"));

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var sizes = {
  'Small  (sm)': 'sm',
  'Medium (md) - default': undefined,
  'Large  (lg)': 'lg'
};
var props = {
  timepicker: function timepicker() {
    return {
      pattern: (0, _addonKnobs.text)('Regular expression for the value (pattern in <TimePicker>)', '(1[012]|[1-9]):[0-5][0-9](\\s)?'),
      placeholder: (0, _addonKnobs.text)('Placeholder text (placeholder in <TimePicker>)', 'hh:mm'),
      disabled: (0, _addonKnobs.boolean)('Disabled (disabled in <TimePicker>)', false),
      light: (0, _addonKnobs.boolean)('Light variant (light in <TimePicker>)', false),
      labelText: (0, _addonKnobs.text)('Label text (labelText in <TimePicker>)', 'Select a time'),
      invalid: (0, _addonKnobs.boolean)('Show form validation UI (invalid in <TimePicker>)', false),
      invalidText: (0, _addonKnobs.text)('Form validation UI content (invalidText in <TimePicker>)', 'A valid value is required'),
      maxLength: (0, _addonKnobs.number)('Maximum length (maxLength in <TimePicker>)', 5),
      size: (0, _addonKnobs.select)('Field size (size)', sizes, undefined) || undefined
    };
  },
  select: function select() {
    return (0, _defineProperty2.default)({
      disabled: (0, _addonKnobs.boolean)('Disabled (disabled in <TimePickerSelect>)', false),
      labelText: (0, _addonKnobs.text)('Label text (labelText in <TimePickerSelect>)', 'Please select')
    }, 'aria-label', (0, _addonKnobs.text)('ARIA label (aria-label in <TimePickerSelect>)', 'open list of options'));
  }
};
var _default = {
  title: 'Components/TimePicker',
  component: _TimePicker.default,
  decorators: [_addonKnobs.withKnobs],
  subcomponents: {
    TimePickerSelect: _TimePickerSelect.default,
    SelectItem: _SelectItem.default
  },
  parameters: {
    docs: {
      page: _TimePicker2.default
    }
  }
};
exports.default = _default;

var Default = function Default() {
  var selectProps = props.select();
  return /*#__PURE__*/_react.default.createElement(_TimePicker.default, (0, _extends2.default)({
    id: "time-picker"
  }, props.timepicker()), /*#__PURE__*/_react.default.createElement(_TimePickerSelect.default, (0, _extends2.default)({
    id: "time-picker-select-1"
  }, selectProps), /*#__PURE__*/_react.default.createElement(_SelectItem.default, {
    value: "AM",
    text: "AM"
  }), /*#__PURE__*/_react.default.createElement(_SelectItem.default, {
    value: "PM",
    text: "PM"
  })), /*#__PURE__*/_react.default.createElement(_TimePickerSelect.default, (0, _extends2.default)({
    id: "time-picker-select-2"
  }, selectProps), /*#__PURE__*/_react.default.createElement(_SelectItem.default, {
    value: "Time zone 1",
    text: "Time zone 1"
  }), /*#__PURE__*/_react.default.createElement(_SelectItem.default, {
    value: "Time zone 2",
    text: "Time zone 2"
  })));
};

exports.Default = Default;
Default.parameters = {
  info: {
    text: "\n        The time picker allow users to select a time.\n      "
  }
};