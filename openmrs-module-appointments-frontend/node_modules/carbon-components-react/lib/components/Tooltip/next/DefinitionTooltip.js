"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefinitionTooltip = DefinitionTooltip;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Popover = require("../../Popover");

var _keyboard = require("../../../internal/keyboard");

var _useId = require("../../../internal/useId");

var _usePrefix = require("../../../internal/usePrefix");

var _deprecate = _interopRequireDefault(require("../../../prop-types/deprecate"));

var _excluded = ["align", "className", "children", "definition", "defaultOpen", "id", "tooltipText", "triggerClassName"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function DefinitionTooltip(_ref) {
  var _ref$align = _ref.align,
      align = _ref$align === void 0 ? 'bottom-left' : _ref$align,
      className = _ref.className,
      children = _ref.children,
      definition = _ref.definition,
      _ref$defaultOpen = _ref.defaultOpen,
      defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen,
      id = _ref.id,
      tooltipText = _ref.tooltipText,
      triggerClassName = _ref.triggerClassName,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _useState = (0, _react.useState)(defaultOpen),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isOpen = _useState2[0],
      setOpen = _useState2[1];

  var prefix = (0, _usePrefix.usePrefix)();
  var tooltipId = (0, _useId.useFallbackId)(id);

  function onKeyDown(event) {
    if (isOpen && (0, _keyboard.match)(event, _keyboard.keys.Escape)) {
      event.stopPropagation();
      setOpen(false);
    }
  }

  return /*#__PURE__*/_react.default.createElement(_Popover.Popover, {
    align: align,
    className: className,
    dropShadow: false,
    highContrast: true,
    onMouseLeave: function onMouseLeave() {
      setOpen(false);
    },
    open: isOpen
  }, /*#__PURE__*/_react.default.createElement("button", (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)("".concat(prefix, "--definition-term"), triggerClassName),
    "aria-controls": tooltipId,
    "aria-expanded": isOpen,
    onBlur: function onBlur() {
      setOpen(false);
    },
    onClick: function onClick() {
      setOpen(!isOpen);
    },
    onKeyDown: onKeyDown,
    type: "button"
  }), children), /*#__PURE__*/_react.default.createElement(_Popover.PopoverContent, {
    className: "".concat(prefix, "--definition-tooltip"),
    id: tooltipId
  }, tooltipText !== null && tooltipText !== void 0 ? tooltipText : definition));
}

DefinitionTooltip.propTypes = {
  /**
   * Specify how the trigger should align with the tooltip
   */
  align: _propTypes.default.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right']),

  /**
   * The `children` prop will be used as the value that is being defined
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: _propTypes.default.string,

  /**
   * Specify whether the tooltip should be open when it first renders
   */
  defaultOpen: _propTypes.default.bool,

  /**
   * The `definition` prop is used as the content inside of the tooltip that
   * appears when a user interacts with the element rendered by the `children`
   * prop
   */
  definition: _propTypes.default.node.isRequired,

  /**
   * Provide a value that will be assigned as the id of the tooltip
   */
  id: _propTypes.default.string,

  /**
   * [Deprecated] Please use the `definition` prop instead.
   *
   * Provide the text that will be displayed in the tooltip when it is rendered.
   */
  tooltipText: (0, _deprecate.default)(_propTypes.default.node, 'The tooltipText prop has been deprecated. Please use the `definition` prop instead.'),

  /**
   * The CSS class name of the trigger element
   */
  triggerClassName: _propTypes.default.string
};