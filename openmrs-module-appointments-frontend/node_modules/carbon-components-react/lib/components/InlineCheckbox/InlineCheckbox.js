"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _usePrefix = require("../../internal/usePrefix");

var _useMergedRefs = require("../../internal/useMergedRefs");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var InlineCheckbox = /*#__PURE__*/_react.default.forwardRef(function InlineCheckbox(props, forwardRef) {
  var ariaLabel = props.ariaLabel,
      _props$checked = props.checked,
      checked = _props$checked === void 0 ? false : _props$checked,
      disabled = props.disabled,
      id = props.id,
      indeterminate = props.indeterminate,
      name = props.name,
      _props$onChange = props.onChange,
      _onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      onClick = props.onClick,
      onKeyDown = props.onKeyDown,
      title = props.title;

  var prefix = (0, _usePrefix.usePrefix)();
  var inputRef = (0, _react.useRef)(null);
  var ref = (0, _useMergedRefs.useMergedRefs)([inputRef, forwardRef]);
  var inputProps = {
    checked: checked,
    className: "".concat(prefix, "--checkbox"),
    disabled: disabled,
    id: id,
    name: name,
    onClick: onClick,
    onChange: function onChange(evt) {
      _onChange(evt.target.checked, id, evt);
    },
    onKeyDown: onKeyDown,
    ref: ref,
    type: 'checkbox'
  };

  if (indeterminate) {
    inputProps.checked = false;
    inputProps['aria-checked'] = 'mixed';
  }

  (0, _react.useEffect)(function () {
    inputRef.current.indeterminate = indeterminate;
  }, [indeterminate]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefix, "--checkbox--inline")
  }, /*#__PURE__*/_react.default.createElement("input", inputProps),
  /*#__PURE__*/

  /* eslint-disable jsx-a11y/label-has-for,jsx-a11y/label-has-associated-control,jsx-a11y/click-events-have-key-events,jsx-a11y/no-noninteractive-element-interactions */
  _react.default.createElement("label", {
    htmlFor: id,
    className: "".concat(prefix, "--checkbox-label"),
    "aria-label": ariaLabel,
    title: title,
    onClick: function onClick(evt) {
      evt.stopPropagation();
    }
  }));
});

InlineCheckbox.propTypes = {
  /**
   * Specify the label for the control
   */
  ariaLabel: _propTypes.default.string.isRequired,

  /**
   * Specify whether the underlying control is checked, or not
   */
  checked: _propTypes.default.bool,

  /**
   * Specify whether the underlying input control should be disabled
   */
  disabled: _propTypes.default.bool,

  /**
   * Provide an `id` for the underlying input control
   */
  id: _propTypes.default.string.isRequired,

  /**
   * Specify whether the control is in an indterminate state
   */
  indeterminate: _propTypes.default.bool,

  /**
   * Provide a `name` for the underlying input control
   */
  name: _propTypes.default.string.isRequired,

  /**
   * Provide an optional hook that is called each time the input is updated
   */
  onChange: _propTypes.default.func,

  /**
   * Provide a handler that is invoked when a user clicks on the control
   */
  onClick: _propTypes.default.func,

  /**
   * Provide a handler that is invoked on the key down event for the control
   */
  onKeyDown: _propTypes.default.func,

  /**
   * Provide an optional tooltip for the InlineCheckbox
   */
  title: _propTypes.default.string
};
var _default = InlineCheckbox;
exports.default = _default;