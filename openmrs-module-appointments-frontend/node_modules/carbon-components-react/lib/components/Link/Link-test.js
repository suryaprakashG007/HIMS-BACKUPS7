"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _carbonComponents = require("carbon-components");

var _react2 = _interopRequireDefault(require("react"));

var _Link = _interopRequireDefault(require("../Link"));

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
var prefix = _carbonComponents.settings.prefix;
describe('Link', function () {
  it('should render an <a> element', function () {
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
      href: "https://carbondesignsystem.com"
    }, "test"));

    var link = _react.screen.getByRole('link');

    expect(link).toBeInTheDocument();
    expect(link).toHaveClass("".concat(prefix, "--link"));
  });
  it('should inherit the href property', function () {
    var href = 'https://carbondesignsystem.com';
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
      "data-testid": "link",
      href: href
    }, "test"));
    expect(_react.screen.getByTestId('link')).toHaveAttribute('href', href);
  });
  it('should include child content', function () {
    var child = 'test';
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
      "data-testid": "link",
      href: "https://carbondesignsystem.com"
    }, child));
    expect(_react.screen.getByTestId('link')).toHaveTextContent(child);
  });
  it('should support a custom class on the element with a link role', function () {
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
      href: "https://carbondesignsystem.com",
      className: "custom-class"
    }, "test"));
    expect(_react.screen.getByRole('link')).toHaveClass('custom-class');
  });
  it('should support being disabled', function () {
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
      href: "https://carbondesignsystem.com",
      disabled: true
    }, "test"));
    expect(_react.screen.getByRole('link')).toBeInTheDocument();
    expect(_react.screen.getByRole('link')).not.toHaveAttribute('href');
    expect(_react.screen.getByRole('link')).toHaveAttribute('aria-disabled', 'true');
  });
  it('should support the inline link variant', function () {
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
      href: "https://carbondesignsystem.com",
      inline: true
    }, "test"));
    expect(_react.screen.getByRole('link')).toHaveClass("".concat(prefix, "--link--inline"));
  });
  it.each(['sm', 'md', 'lg'])('should support the %s size variant', function (size) {
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
      href: "https://carbondesignsystem.com",
      size: size
    }, "test"));
    expect(_react.screen.getByRole('link')).toHaveClass("".concat(prefix, "--link--").concat(size));
  });
  it('should add rel="noopener" automatically if target="_blank"', function () {
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
      href: "https://carbondesignsystem.com",
      target: "_blank"
    }, "test"));
    expect(_react.screen.getByRole('link')).toHaveAttribute('rel', 'noopener');
  });
  it('should receive keyboard focus', function () {
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
      href: "/",
      className: "some-class"
    }, "A simple link"));
    expect(document.body).toHaveFocus();

    _userEvent.default.tab();

    expect(_react.screen.getByText('A simple link')).toHaveFocus();
  });
  it('should not receive keyboard focus when disabled', function () {
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
      href: "/",
      disabled: true,
      className: "some-class"
    }, "A simple link"));
    expect(document.body).toHaveFocus();

    _userEvent.default.tab();

    expect(document.body).toHaveFocus();
  });
  describe('automated verification testing', function () {
    it('should have no aXe violations', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
                href: "/",
                className: "some-class"
              }, "A simple link"));
              _context.next = 3;
              return expect(_react.screen.getByText('A simple link')).toHaveNoAxeViolations();

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    it('should have no Accessibility Checker violations', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              (0, _react.render)( /*#__PURE__*/_react2.default.createElement("main", null, /*#__PURE__*/_react2.default.createElement(_Link.default, {
                href: "/",
                className: "some-class"
              }, "A simple link")));
              _context2.next = 3;
              return expect(_react.screen.getByText('A simple link')).toHaveNoACViolations('Link');

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
  });
  describe('Component API', function () {
    it('should support a `ref` on the element with role of link', function () {
      var ref = jest.fn();
      (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_Link.default, {
        href: "https://carbondesignsystem.com",
        ref: ref
      }, "A simple link"));
      expect(ref).toHaveBeenCalledWith(_react.screen.getByRole('link'));
    });
  });
});