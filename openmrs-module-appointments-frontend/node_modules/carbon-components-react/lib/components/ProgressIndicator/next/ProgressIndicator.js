"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressIndicator = ProgressIndicator;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _usePrefix = require("../../../internal/usePrefix");

var _excluded = ["children", "className", "currentIndex", "onChange", "spaceEqually", "vertical"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ProgressIndicator(_ref) {
  var _cx;

  var children = _ref.children,
      customClassName = _ref.className,
      _ref$currentIndex = _ref.currentIndex,
      controlledIndex = _ref$currentIndex === void 0 ? 0 : _ref$currentIndex,
      onChange = _ref.onChange,
      spaceEqually = _ref.spaceEqually,
      vertical = _ref.vertical,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var prefix = (0, _usePrefix.usePrefix)();

  var _useState = (0, _react.useState)(controlledIndex),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      currentIndex = _useState2[0],
      setCurrentIndex = _useState2[1];

  var _useState3 = (0, _react.useState)(controlledIndex),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      prevControlledIndex = _useState4[0],
      setPrevControlledIndex = _useState4[1];

  var className = (0, _classnames.default)((_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(prefix, "--progress"), true), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--progress--vertical"), vertical), (0, _defineProperty2.default)(_cx, "".concat(prefix, "--progress--space-equal"), spaceEqually && !vertical), (0, _defineProperty2.default)(_cx, customClassName, customClassName), _cx));

  if (controlledIndex !== prevControlledIndex) {
    setCurrentIndex(controlledIndex);
    setPrevControlledIndex(controlledIndex);
  }

  return /*#__PURE__*/_react.default.createElement("ul", (0, _extends2.default)({
    className: className
  }, rest), _react.default.Children.map(children, function (child, index) {
    // only setup click handlers if onChange event is passed
    var onClick = onChange ? function () {
      return onChange(index);
    } : undefined;

    if (index === currentIndex) {
      return /*#__PURE__*/_react.default.cloneElement(child, {
        current: true,
        index: index,
        onClick: onClick
      });
    }

    if (index < currentIndex) {
      return /*#__PURE__*/_react.default.cloneElement(child, {
        complete: true,
        index: index,
        onClick: onClick
      });
    }

    if (index > currentIndex) {
      return /*#__PURE__*/_react.default.cloneElement(child, {
        complete: child.props.complete || false,
        index: index,
        onClick: onClick
      });
    }

    return null;
  }));
}

ProgressIndicator.propTypes = {
  /**
   * Provide <ProgressStep> components to be rendered in the
   * <ProgressIndicator>
   */
  children: _propTypes.default.node,

  /**
   * Provide an optional className to be applied to the containing node
   */
  className: _propTypes.default.string,

  /**
   * Optionally specify the current step array index
   */
  currentIndex: _propTypes.default.number,

  /**
   * Optional callback called if a ProgressStep is clicked on.  Returns the index of the step.
   */
  onChange: _propTypes.default.func,

  /**
   * Specify whether the progress steps should be split equally in size in the div
   */
  spaceEqually: _propTypes.default.bool,

  /**
   * Determines whether or not the ProgressIndicator should be rendered vertically.
   */
  vertical: _propTypes.default.bool
};