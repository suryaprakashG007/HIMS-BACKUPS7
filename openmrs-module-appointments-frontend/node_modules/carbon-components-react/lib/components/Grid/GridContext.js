"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridSettings = GridSettings;
exports.useGridSettings = useGridSettings;

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Provides a grid context for communication the grid "mode" (flexbox or
 * css-grid) along with subgrid information.
 */
var GridSettingsContext = /*#__PURE__*/React.createContext({
  mode: 'flexbox',
  subgrid: false
});

function GridSettings(_ref) {
  var children = _ref.children,
      mode = _ref.mode,
      _ref$subgrid = _ref.subgrid,
      subgrid = _ref$subgrid === void 0 ? false : _ref$subgrid;
  var value = React.useMemo(function () {
    return {
      mode: mode,
      subgrid: subgrid
    };
  }, [mode, subgrid]);
  return /*#__PURE__*/React.createElement(GridSettingsContext.Provider, {
    value: value
  }, children);
}

GridSettings.propTypes = {
  /**
   * Pass in components which will be rendered within the `GridSettings`
   * component
   */
  children: _propTypes.default.node,

  /**
   * Specify the grid mode for the GridContext
   */
  mode: _propTypes.default.oneOf(['flexbox', 'css-grid']).isRequired,

  /**
   * Specify whether subgrid should be enabled
   */
  subgrid: _propTypes.default.bool
};
/**
 * Helper function for accessing the GridContext value
 */

function useGridSettings() {
  return React.useContext(GridSettingsContext);
}